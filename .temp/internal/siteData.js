/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "职念",
  "description": "",
  "base": "/",
  "headTags": [],
  "pages": [
    {
      "title": "Config",
      "frontmatter": {
        "api": true
      },
      "regularPath": "/api/",
      "relativePath": "api/index.md",
      "key": "v-0f53fcf8",
      "path": "/api/",
      "headersStr": null,
      "content": "",
      "normalizedContent": "",
      "charsets": {}
    },
    {
      "title": "utils 工具类",
      "frontmatter": {
        "pageClass": "utils"
      },
      "regularPath": "/api/utils.html",
      "relativePath": "api/utils.md",
      "key": "v-6906316b",
      "path": "/api/utils.html",
      "headers": [
        {
          "level": 2,
          "title": "addUser 添加用户",
          "slug": "adduser-添加用户",
          "normalizedTitle": "adduser 添加用户",
          "charIndex": 133
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "getUserID 获取用户openid",
          "slug": "getuserid-获取用户openid",
          "normalizedTitle": "getuserid 获取用户openid",
          "charIndex": 946
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-2",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-2",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-2",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "addArticle 添加文章",
          "slug": "addarticle-添加文章",
          "normalizedTitle": "addarticle 添加文章",
          "charIndex": 1522
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-3",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-3",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-3",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "getArticle 获取文章",
          "slug": "getarticle-获取文章",
          "normalizedTitle": "getarticle 获取文章",
          "charIndex": 2246
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-4",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-4",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-4",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "addLike 添加点赞或插眼",
          "slug": "addlike-添加点赞或插眼",
          "normalizedTitle": "addlike 添加点赞或插眼",
          "charIndex": 2652
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-5",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-5",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-5",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "addComment 添加评论",
          "slug": "addcomment-添加评论",
          "normalizedTitle": "addcomment 添加评论",
          "charIndex": 3201
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-6",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-6",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-6",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "addCollect 添加收藏",
          "slug": "addcollect-添加收藏",
          "normalizedTitle": "addcollect 添加收藏",
          "charIndex": 3758
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-7",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-7",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-7",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "getAim 获取目标",
          "slug": "getaim-获取目标",
          "normalizedTitle": "getaim 获取目标",
          "charIndex": 4282
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-8",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-8",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-8",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "updateAim 更新目标",
          "slug": "updateaim-更新目标",
          "normalizedTitle": "updateaim 更新目标",
          "charIndex": 4567
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-9",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-9",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-9",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "getMyArticle 获取我的文章",
          "slug": "getmyarticle-获取我的文章",
          "normalizedTitle": "getmyarticle 获取我的文章",
          "charIndex": 5028
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-10",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-10",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-10",
          "normalizedTitle": "返回值",
          "charIndex": 739
        },
        {
          "level": 2,
          "title": "deleteArticle 删除文章",
          "slug": "deletearticle-删除文章",
          "normalizedTitle": "deletearticle 删除文章",
          "charIndex": 5387
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-11",
          "normalizedTitle": "声明",
          "charIndex": 150
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-11",
          "normalizedTitle": "调用",
          "charIndex": 60
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-11",
          "normalizedTitle": "返回值",
          "charIndex": 739
        }
      ],
      "headersStr": "addUser 添加用户 声明 调用 返回值 getUserID 获取用户openid 声明 调用 返回值 addArticle 添加文章 声明 调用 返回值 getArticle 获取文章 声明 调用 返回值 addLike 添加点赞或插眼 声明 调用 返回值 addComment 添加评论 声明 调用 返回值 addCollect 添加收藏 声明 调用 返回值 getAim 获取目标 声明 调用 返回值 updateAim 更新目标 声明 调用 返回值 getMyArticle 获取我的文章 声明 调用 返回值 deleteArticle 删除文章 声明 调用 返回值",
      "content": "# utils 工具类\n\n我把主要的工具函数（包括数据库的各类读写）都封装起来放在了 utils 文件夹中，这样可以方便调用。\n\nTIP\n\n下面的调用只是示例，具体的调用请根据自己的需要传入相应的参数。并未对所有的工具进行完善测试，使用过程中有问题请告知。\n\n\n# addUser 添加用户\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addUser = require(\"../../utils/addUser.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 参数列表，必须按顺序传入\n * @param {string} name 用户名\n * @param {string} avatar 用户的头像链接\n * @param {string} id 用户的ID\n */\n\n\n调用示例：\n\nlet res=await addUser.addUser.addMethod(this.data.userName,this.data.userAvatar,this.data.userID)\n\n\n注意，必须使用 await 关键字，否则会报错。并且调用这个方法的函数必须是异步函数。例如：\n\nPage({\n  data: {\n    //...\n  },\n  onLoad:async function (options) {\n    let res=await addUser.addUser.addMethod(this.data.userName,this.data.userAvatar,this.data.userID)\n  },\n  //...\n})\n\n\n它所在的函数声明中必须有 async 关键字。\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。也就是说：\n\nlet res=await addUser.addUser.addMethod(this.data.userName,this.data.userAvatar,this.data.userID);\nconsole.log(res)\n\n\n打印出的结果是 添加成功 或者 添加失败。\n\n你可以根据这个返回值来向用户作出声明。\n\n\n# getUserID 获取用户openid\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getUserID = require(\"../../utils/getUserID.js\");\n\n\n\n# 调用\n\n无传入参数，直接调用，但是只能在按钮点击事件中调用。\n\nawait getUserID.getui.getUserID();\n\n\n同上，必须在异步函数中调用。\n\nasync login() {\n    // 用户登录\n    let resl = await getUserID.getui.getUserID();\n    this.setData({\n      userID: resl[2],\n      userAvatar: resl[1],\n      userName: resl[0],\n    });\n    console.log(\"!!\" + this.data.userID + this.data.userAvatar);\n},\n\n\n\n# 返回值\n\n返回值是一个数组，包含三个元素，分别是：\n\nresl[0] // 用户名\nresl[1] // 用户头像链接\nresl[2] // 用户openid\n\n\n在调用完这个函数后，你可以把这三个值赋值给 App.js 的data中的变量，供全局使用。\n\n\n# addArticle 添加文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addArticle = require(\"../../utils/addArticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 用于向集合 articleList 添加一条文章信息\n * 参数列表，必须按顺序传入\n * @param {string} title 文章标题\n * @param {string} tag 文章标签\n * @param {string} content 文章内容\n * @param {string} type 文章类型\n * @param {List} images 图片列表\n * @param {string} author 文章作者\n * @param {string} authorID 文章作者ID\n * @param {string} authorAvatar 文章作者头像\n */\n\n\n必须按照上面的顺序传入参数。\n\n以异步的形式调用，示例：\n\nlet res = await addArticle.addArticle.addMethod(\n  this.data.title,\n  this.data.tag,\n  this.data.content,\n  this.data.type,\n  this.data.images,\n  this.data.userName,\n  this.data.userID,\n  this.data.userAvatar\n);\n\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。\n\n\n# getArticle 获取文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getArticle = require(\"../../utils/getArticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 查询一篇文章\n * @param {string} id 文章id\n */\n\n\n传入的参数是文章的id。用于在我的时跳转到文章详情页。\n\n以异步的形式调用，示例：\n\nlet res = await getArticle.getArticle.getArticleMethod(this.data.id);\n\n\n\n# 返回值\n\n返回值是一个对象，包含文章的所有信息。\n\nres.data[0].articleTitle // 文章标题\nres.data[0].articleTag // 文章标签\n//... 具体请查看云开发数据库\n\n\n\n# addLike 添加点赞或插眼\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addLike = require(\"../../utils/addLike.js\");\n\n\n\n# 调用\n\n接收两个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id。\n\n/**\n * 为文章增加一个点赞或插眼\n * @param {string} articleId 文章id\n * @param {string} userId 发生点赞行为的用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addLike.addLike.addMethod(this.data.id, this.data.userID);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经点赞或插眼，如果已经点赞或插眼，会在数据库删除点赞和插眼的记录，返回 取消点赞成功 或 取消点赞失败。如果尚未点赞或插眼，会在数据库添加点赞和插眼的记录，返回 点赞成功 或 点赞失败。\n\n返回值是 点赞成功 和 点赞失败 和 取消点赞成功 和 取消点赞失败 四种 string 类型。\n\n在判断显示点赞和插眼的图标时，可以通过文章中的 likeList.length 来得到应该显示的数量。\n\n\n# addComment 添加评论\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addComment = require(\"../../utils/addComment.js\");\n\n\n\n# 调用\n\n接收三个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id，第三个参数是评论内容，第四个是评论者的用户名。\n\n/**\n * 为文章增加一个评论\n * @param {string} articleId 文章id\n * @param {string} userId 发生点赞行为的用户id\n * @param {string} comment 评论内容\n * @param {string} commentUserName 评论者用户名\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addComment.addComment.addMethod(this.data.id, this.data.userID, this.data.comment, this.data.commentUserName);\n\n\n\n# 返回值\n\n本工具会在数据库添加评论的记录，返回 评论成功 或 评论失败。\n\n返回值是 评论成功 和 评论失败 两种 string 类型。\n\n\n# addCollect 添加收藏\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addCollect = require(\"../../utils/addCollect.js\");\n\n\n\n# 调用\n\n接收四个参数。\n\n/**\n * 添加一个收藏\n * @param {string} articleID 收藏的文章id\n * @param {string} userID 收藏者id\n * @param {string} title 收藏的文章标题\n * @param {number} type 收藏的文章类型\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addCollect.addCollect.addCollectMethod(this.data.id, this.data.userID, this.data.title,this.data.type);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经收藏，如果已经收藏，，返回 已收藏 或。如果尚未收藏，会在数据库添加收藏的记录，返回 收藏成功 或 收藏失败。\n\n返回值是 收藏成功 和 收藏失败 和 已收藏 三种 string 类型。\n\n\n# getAim 获取目标\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getAim = require(\"../../utils/getAim.js\");\n\n\n\n# 调用\n\n接收一个参数，用户的id。\n\n/**\n * 获取目标\n * @param {string} userID 用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await getAim.getAim.getAimMethod(this.data.userID);\n\n\n\n# 返回值\n\n返回值为 res.data[0].aim 和 \"获取失败\" 两种类型。\n\n\n# updateAim 更新目标\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet updateAim = require(\"../../utils/updateAim.js\");\n\n\n\n# 调用\n\n参数：\n\n/**\n * 修改用户的aim\n * @param {string} userID 用户id\n * @param {string} title 目标标题\n * @param {string} desc 目标内容\n * @param {string} beginDate 目标开始日期\n * @param {string} endDate 目标结束日期\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await updateAim.updateAim.updateAimMethod(this.userID, this.title, this.desc, this.beginDate, this.endDate);\n\n\n\n# 返回值\n\n返回值为 修改成功 和 修改失败 两种类型。\n\n\n# getMyArticle 获取我的文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getMyArticle = require(\"../../utils/getMyArticle.js\");\n\n\n\n# 调用\n\n参数：\n\n/**\n * 获取我的所有贴子\n * @param {string} uid 用户id\n * @param {number} type 贴子类型,1为经验，2为回答\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await getMyArticle.getMyArticle.getMyArticleMethod(this.data.uid, this.data.type);\n\n\n\n# 返回值\n\n返回值为 res.data 和 \"获取失败\" 两种类型。\n\n\n# deleteArticle 删除文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet deleteArticle = require(\"../../utils/deleteArticle.js\");\n\n\n\n# 调用\n\n参数：\n\n/**\n * 删除文章\n * @param {string} id 文章id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await deleteArticle.deleteArticle.deleteMethod(this.data.articleId);\n\n\n\n# 返回值\n\n返回值为 删除成功 和 删除失败 两种类型。",
      "normalizedContent": "# utils 工具类\n\n我把主要的工具函数（包括数据库的各类读写）都封装起来放在了 utils 文件夹中，这样可以方便调用。\n\ntip\n\n下面的调用只是示例，具体的调用请根据自己的需要传入相应的参数。并未对所有的工具进行完善测试，使用过程中有问题请告知。\n\n\n# adduser 添加用户\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet adduser = require(\"../../utils/adduser.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 参数列表，必须按顺序传入\n * @param {string} name 用户名\n * @param {string} avatar 用户的头像链接\n * @param {string} id 用户的id\n */\n\n\n调用示例：\n\nlet res=await adduser.adduser.addmethod(this.data.username,this.data.useravatar,this.data.userid)\n\n\n注意，必须使用 await 关键字，否则会报错。并且调用这个方法的函数必须是异步函数。例如：\n\npage({\n  data: {\n    //...\n  },\n  onload:async function (options) {\n    let res=await adduser.adduser.addmethod(this.data.username,this.data.useravatar,this.data.userid)\n  },\n  //...\n})\n\n\n它所在的函数声明中必须有 async 关键字。\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。也就是说：\n\nlet res=await adduser.adduser.addmethod(this.data.username,this.data.useravatar,this.data.userid);\nconsole.log(res)\n\n\n打印出的结果是 添加成功 或者 添加失败。\n\n你可以根据这个返回值来向用户作出声明。\n\n\n# getuserid 获取用户openid\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getuserid = require(\"../../utils/getuserid.js\");\n\n\n\n# 调用\n\n无传入参数，直接调用，但是只能在按钮点击事件中调用。\n\nawait getuserid.getui.getuserid();\n\n\n同上，必须在异步函数中调用。\n\nasync login() {\n    // 用户登录\n    let resl = await getuserid.getui.getuserid();\n    this.setdata({\n      userid: resl[2],\n      useravatar: resl[1],\n      username: resl[0],\n    });\n    console.log(\"!!\" + this.data.userid + this.data.useravatar);\n},\n\n\n\n# 返回值\n\n返回值是一个数组，包含三个元素，分别是：\n\nresl[0] // 用户名\nresl[1] // 用户头像链接\nresl[2] // 用户openid\n\n\n在调用完这个函数后，你可以把这三个值赋值给 app.js 的data中的变量，供全局使用。\n\n\n# addarticle 添加文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addarticle = require(\"../../utils/addarticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 用于向集合 articlelist 添加一条文章信息\n * 参数列表，必须按顺序传入\n * @param {string} title 文章标题\n * @param {string} tag 文章标签\n * @param {string} content 文章内容\n * @param {string} type 文章类型\n * @param {list} images 图片列表\n * @param {string} author 文章作者\n * @param {string} authorid 文章作者id\n * @param {string} authoravatar 文章作者头像\n */\n\n\n必须按照上面的顺序传入参数。\n\n以异步的形式调用，示例：\n\nlet res = await addarticle.addarticle.addmethod(\n  this.data.title,\n  this.data.tag,\n  this.data.content,\n  this.data.type,\n  this.data.images,\n  this.data.username,\n  this.data.userid,\n  this.data.useravatar\n);\n\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。\n\n\n# getarticle 获取文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getarticle = require(\"../../utils/getarticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 查询一篇文章\n * @param {string} id 文章id\n */\n\n\n传入的参数是文章的id。用于在我的时跳转到文章详情页。\n\n以异步的形式调用，示例：\n\nlet res = await getarticle.getarticle.getarticlemethod(this.data.id);\n\n\n\n# 返回值\n\n返回值是一个对象，包含文章的所有信息。\n\nres.data[0].articletitle // 文章标题\nres.data[0].articletag // 文章标签\n//... 具体请查看云开发数据库\n\n\n\n# addlike 添加点赞或插眼\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addlike = require(\"../../utils/addlike.js\");\n\n\n\n# 调用\n\n接收两个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id。\n\n/**\n * 为文章增加一个点赞或插眼\n * @param {string} articleid 文章id\n * @param {string} userid 发生点赞行为的用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addlike.addlike.addmethod(this.data.id, this.data.userid);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经点赞或插眼，如果已经点赞或插眼，会在数据库删除点赞和插眼的记录，返回 取消点赞成功 或 取消点赞失败。如果尚未点赞或插眼，会在数据库添加点赞和插眼的记录，返回 点赞成功 或 点赞失败。\n\n返回值是 点赞成功 和 点赞失败 和 取消点赞成功 和 取消点赞失败 四种 string 类型。\n\n在判断显示点赞和插眼的图标时，可以通过文章中的 likelist.length 来得到应该显示的数量。\n\n\n# addcomment 添加评论\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addcomment = require(\"../../utils/addcomment.js\");\n\n\n\n# 调用\n\n接收三个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id，第三个参数是评论内容，第四个是评论者的用户名。\n\n/**\n * 为文章增加一个评论\n * @param {string} articleid 文章id\n * @param {string} userid 发生点赞行为的用户id\n * @param {string} comment 评论内容\n * @param {string} commentusername 评论者用户名\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addcomment.addcomment.addmethod(this.data.id, this.data.userid, this.data.comment, this.data.commentusername);\n\n\n\n# 返回值\n\n本工具会在数据库添加评论的记录，返回 评论成功 或 评论失败。\n\n返回值是 评论成功 和 评论失败 两种 string 类型。\n\n\n# addcollect 添加收藏\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addcollect = require(\"../../utils/addcollect.js\");\n\n\n\n# 调用\n\n接收四个参数。\n\n/**\n * 添加一个收藏\n * @param {string} articleid 收藏的文章id\n * @param {string} userid 收藏者id\n * @param {string} title 收藏的文章标题\n * @param {number} type 收藏的文章类型\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addcollect.addcollect.addcollectmethod(this.data.id, this.data.userid, this.data.title,this.data.type);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经收藏，如果已经收藏，，返回 已收藏 或。如果尚未收藏，会在数据库添加收藏的记录，返回 收藏成功 或 收藏失败。\n\n返回值是 收藏成功 和 收藏失败 和 已收藏 三种 string 类型。\n\n\n# getaim 获取目标\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getaim = require(\"../../utils/getaim.js\");\n\n\n\n# 调用\n\n接收一个参数，用户的id。\n\n/**\n * 获取目标\n * @param {string} userid 用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await getaim.getaim.getaimmethod(this.data.userid);\n\n\n\n# 返回值\n\n返回值为 res.data[0].aim 和 \"获取失败\" 两种类型。\n\n\n# updateaim 更新目标\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet updateaim = require(\"../../utils/updateaim.js\");\n\n\n\n# 调用\n\n参数：\n\n/**\n * 修改用户的aim\n * @param {string} userid 用户id\n * @param {string} title 目标标题\n * @param {string} desc 目标内容\n * @param {string} begindate 目标开始日期\n * @param {string} enddate 目标结束日期\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await updateaim.updateaim.updateaimmethod(this.userid, this.title, this.desc, this.begindate, this.enddate);\n\n\n\n# 返回值\n\n返回值为 修改成功 和 修改失败 两种类型。\n\n\n# getmyarticle 获取我的文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getmyarticle = require(\"../../utils/getmyarticle.js\");\n\n\n\n# 调用\n\n参数：\n\n/**\n * 获取我的所有贴子\n * @param {string} uid 用户id\n * @param {number} type 贴子类型,1为经验，2为回答\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await getmyarticle.getmyarticle.getmyarticlemethod(this.data.uid, this.data.type);\n\n\n\n# 返回值\n\n返回值为 res.data 和 \"获取失败\" 两种类型。\n\n\n# deletearticle 删除文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet deletearticle = require(\"../../utils/deletearticle.js\");\n\n\n\n# 调用\n\n参数：\n\n/**\n * 删除文章\n * @param {string} id 文章id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await deletearticle.deletearticle.deletemethod(this.data.articleid);\n\n\n\n# 返回值\n\n返回值为 删除成功 和 删除失败 两种类型。",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Disable Sidebar Example",
      "frontmatter": {
        "sidebar": false
      },
      "regularPath": "/examples/disable-sidebar.html",
      "relativePath": "examples/disable-sidebar.md",
      "key": "v-4f93c1a2",
      "path": "/examples/disable-sidebar.html",
      "headers": [
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-2",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-3",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-4",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-5",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        },
        {
          "level": 2,
          "title": "Disable Sidebar Example",
          "slug": "disable-sidebar-example-6",
          "normalizedTitle": "disable sidebar example",
          "charIndex": 2
        }
      ],
      "headersStr": "Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example",
      "content": "# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example\n\n\n# Disable Sidebar Example\n\nDisable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example Disable Sidebar Example",
      "normalizedContent": "# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example\n\n\n# disable sidebar example\n\ndisable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example disable sidebar example",
      "charsets": {}
    },
    {
      "title": "云存储",
      "frontmatter": {
        "pageClass": "yuncunchu"
      },
      "regularPath": "/api/yuncunchu.html",
      "relativePath": "api/yuncunchu.md",
      "key": "v-34768dcb",
      "path": "/api/yuncunchu.html",
      "headers": [
        {
          "level": 2,
          "title": "wx.cloud.uploadFile",
          "slug": "wx-cloud-uploadfile",
          "normalizedTitle": "wx.cloud.uploadfile",
          "charIndex": 10
        },
        {
          "level": 2,
          "title": "wx.cloud.downloadFile",
          "slug": "wx-cloud-downloadfile",
          "normalizedTitle": "wx.cloud.downloadfile",
          "charIndex": 310
        }
      ],
      "headersStr": "wx.cloud.uploadFile wx.cloud.downloadFile",
      "content": "# 云存储\n\n\n# wx.cloud.uploadFile\n\nwx.cloud.uploadFile 用于将用户小程序端的文件上传到云存储空间中。\n\nwx.cloud.uploadFile({\n  cloudPath: 'example.png', // 上传至云端的路径\n  filePath: '', // 小程序临时文件路径\n  success: res => {\n    // 返回文件 ID\n    console.log(res.fileID)\n  },\n  fail: console.error\n})\n\n\n上传成功后会获得文件唯一标识符，即文件 ID，后续操作都基于文件 ID 而不是 URL。\n\n\n# wx.cloud.downloadFile\n\nwx.cloud.downloadFile 用于将云存储空间中的文件下载到用户小程序端。\n\nwx.cloud.downloadFile({\n  fileID: 'cloud://xxx.png', // 文件 ID\n  success: res => {\n    // 返回临时文件路径\n    console.log(res.tempFilePath)\n  },\n  fail: console.error\n})\n",
      "normalizedContent": "# 云存储\n\n\n# wx.cloud.uploadfile\n\nwx.cloud.uploadfile 用于将用户小程序端的文件上传到云存储空间中。\n\nwx.cloud.uploadfile({\n  cloudpath: 'example.png', // 上传至云端的路径\n  filepath: '', // 小程序临时文件路径\n  success: res => {\n    // 返回文件 id\n    console.log(res.fileid)\n  },\n  fail: console.error\n})\n\n\n上传成功后会获得文件唯一标识符，即文件 id，后续操作都基于文件 id 而不是 url。\n\n\n# wx.cloud.downloadfile\n\nwx.cloud.downloadfile 用于将云存储空间中的文件下载到用户小程序端。\n\nwx.cloud.downloadfile({\n  fileid: 'cloud://xxx.png', // 文件 id\n  success: res => {\n    // 返回临时文件路径\n    console.log(res.tempfilepath)\n  },\n  fail: console.error\n})\n",
      "charsets": {
        "cjk": true
      }
    },
    {
      "frontmatter": {
        "pageLayout": "PageLayout1"
      },
      "regularPath": "/examples/using-page-layout.html",
      "relativePath": "examples/using-page-layout.md",
      "key": "v-7c33081f",
      "path": "/examples/using-page-layout.html",
      "headersStr": null,
      "content": "",
      "normalizedContent": "",
      "charsets": {}
    },
    {
      "title": "数据库设计",
      "frontmatter": {
        "title": "数据库设计",
        "date": "2022-10-07T00:00:00.000Z"
      },
      "regularPath": "/guide/database.html",
      "relativePath": "guide/database.md",
      "key": "v-02e3e07b",
      "path": "/guide/database.html",
      "headers": [
        {
          "level": 2,
          "title": "表 1：userList",
          "slug": "表-1-userlist",
          "normalizedTitle": "表 1：userlist",
          "charIndex": 12
        },
        {
          "level": 3,
          "title": "- userID 【关键码】",
          "slug": "userid-【关键码】",
          "normalizedTitle": "- userid 【关键码】",
          "charIndex": 36
        },
        {
          "level": 3,
          "title": "- userName",
          "slug": "username",
          "normalizedTitle": "- username",
          "charIndex": 119
        },
        {
          "level": 3,
          "title": "- userAvater",
          "slug": "useravater",
          "normalizedTitle": "- useravater",
          "charIndex": 193
        },
        {
          "level": 3,
          "title": "- expCre",
          "slug": "expcre",
          "normalizedTitle": "- expcre",
          "charIndex": 266
        },
        {
          "level": 3,
          "title": "- likeCre",
          "slug": "likecre",
          "normalizedTitle": "- likecre",
          "charIndex": 368
        },
        {
          "level": 3,
          "title": "- collectNum",
          "slug": "collectnum",
          "normalizedTitle": "- collectnum",
          "charIndex": 455
        },
        {
          "level": 3,
          "title": "- CollectList",
          "slug": "collectlist",
          "normalizedTitle": "- collectlist",
          "charIndex": 564
        },
        {
          "level": 3,
          "title": "- CreateList",
          "slug": "createlist",
          "normalizedTitle": "- createlist",
          "charIndex": 783
        },
        {
          "level": 3,
          "title": "- aim",
          "slug": "aim",
          "normalizedTitle": "- aim",
          "charIndex": 1001
        },
        {
          "level": 3,
          "title": "userList 数据表 json 示例",
          "slug": "userlist-数据表-json-示例",
          "normalizedTitle": "userlist 数据表 json 示例",
          "charIndex": 1196
        },
        {
          "level": 2,
          "title": "表 2：articleList",
          "slug": "表-2-articlelist",
          "normalizedTitle": "表 2：articlelist",
          "charIndex": 1974
        },
        {
          "level": 3,
          "title": "- articleID 【关键码】",
          "slug": "articleid-【关键码】",
          "normalizedTitle": "- articleid 【关键码】",
          "charIndex": 2003
        },
        {
          "level": 3,
          "title": "- authorID 【绑定值】",
          "slug": "authorid-【绑定值】",
          "normalizedTitle": "- authorid 【绑定值】",
          "charIndex": 2071
        },
        {
          "level": 3,
          "title": "- articleTitle",
          "slug": "articletitle",
          "normalizedTitle": "- articletitle",
          "charIndex": 2162
        },
        {
          "level": 3,
          "title": "- articleTag",
          "slug": "articletag",
          "normalizedTitle": "- articletag",
          "charIndex": 2242
        },
        {
          "level": 3,
          "title": "- desc",
          "slug": "desc",
          "normalizedTitle": "- desc",
          "charIndex": 2320
        },
        {
          "level": 3,
          "title": "- time",
          "slug": "time",
          "normalizedTitle": "- time",
          "charIndex": 2408
        },
        {
          "level": 3,
          "title": "- type",
          "slug": "type",
          "normalizedTitle": "- type",
          "charIndex": 2469
        },
        {
          "level": 3,
          "title": "- number",
          "slug": "number",
          "normalizedTitle": "- number",
          "charIndex": 2546
        },
        {
          "level": 3,
          "title": "- commentList",
          "slug": "commentlist",
          "normalizedTitle": "- commentlist",
          "charIndex": 2655
        },
        {
          "level": 3,
          "title": "- imageList",
          "slug": "imagelist",
          "normalizedTitle": "- imagelist",
          "charIndex": 2872
        }
      ],
      "headersStr": "表 1：userList - userID 【关键码】 - userName - userAvater - expCre - likeCre - collectNum - CollectList - CreateList - aim userList 数据表 json 示例 表 2：articleList - articleID 【关键码】 - authorID 【绑定值】 - articleTitle - articleTag - desc - time - type - number - commentList - imageList",
      "content": "# 数据库设计\n\n\n# 表 1：userList\n\n> 用户表\n\n\n# - userID 【关键码】\n\n定义 用户唯一 ID | String | 必填\n初始化 在用户首次登陆时写入，来自微信提供的 API 接口（openid）\n\n\n# - userName\n\n定义 用户昵称 | String | 必填\n初始化 在用户首次登陆时写入，来自微信提供的 API 接口（微信昵称）\n\n\n# - userAvater\n\n定义 用户头像的链接 | String | 必填\n初始化 在用户首次登陆时写入，来自微信提供的 API 接口\n\n\n# - expCre\n\n定义 用户经验积分 | Number | 必填\n初始化 在用户首次登陆时写入，初始化为 0\n可能引起变动\n1.用户点击收藏一个经验贴，+10。\n2.用户发表一篇经验，+30。\n\n\n# - likeCre\n\n定义 用户赞赏积分 | Number | 必填\n初始化 在用户首次登陆时写入，初始化为 0\n可能引起变动\n1.用户发表的经验贴被点赞，+30。\n\n\n# - collectNum\n\n定义 用户收藏的贴子数 | Number | 必填\n初始化 在用户首次登陆时写入，初始化为 0\n可能引起变动\n1.用户点击收藏一篇经验贴时+1。\n2.用户点击收藏一篇问答贴时+1。\n\n\n# - CollectList\n\n定义 用户收藏的帖子列表 | List[object,...] | 必填\n初始化 在用户首次登陆时写入，初始化为 []\n可能引起变动\n1.用户点击收藏一篇经验贴时在数组中添加一个对象。\n2.用户点击收藏一篇问答贴时在数组中添加一个对象。\n子对象\n存放在数组中的对象。示例：\n\n{\n  articleID:\"dwgrgh\",\n  articleTitle:\"这是一个标题\",\n  type:1,\n}\n\n\n\n# - CreateList\n\n定义 用户发表的文章列表 | List[object,...] | 必填\n初始化 在用户首次登陆时写入，初始化为 []\n可能引起变动\n1.用户点击发布一篇经验贴时在数组中添加一个对象。\n2.用户点击发布一篇问答贴时在数组中添加一个对象。\n子对象\n存放在数组中的对象。示例：\n\n{\n  articleID:\"dwgrgh\",\n  articleTitle:\"这是一个标题\",\n  type:1,\n}\n\n\n\n# - aim\n\n定义 用户的目标字段 | object | 必填\n初始化 在用户首次登陆时写入，初始化为下例\n可能引起变动\n用户修改目标页面的参数时操作数据库修改。\n对象值\n\naim:{\n    aimTitle:\"我的目标\",\n    aimDesc:\"我的目标描述\",\n    beginDate: 2022-10-11,\n    endDate:2024-10-11\n  }\n\n\n\n# userList 数据表 json 示例\n\n这是一条数据：\n\n{\n  userName:\"\",  // 用户昵称\n  userAvater:\"\",  // 用户头像链接\n  userID:\"\", // 用户唯一标识符（openid）\n  expCre:100, // 用户的经验积分\n  likeCre:50, // 用户的赞赏值\n  collectNum:10, // 用户的收藏数\n  CollectList:[\n    {\n      articleID:\"dwgrgh\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleID:\"fewgrrg\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    //...\n  ],\n  CreateList:[\n    {\n      articleID:\"dwgrgh\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleID:\"fewgrrg\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleID:\"effrgh\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    //...\n  ],\n  aim:{\n    aimTitle:\"我的目标\",\n    aimDesc:\"我的目标描述\",\n    beginDate: 2022-10-11,\n    endDate:2024-10-11\n  }\n}\n\n\n\n# 表 2：articleList\n\n> 文章数据表\n\n\n# - articleID 【关键码】\n\n定义 文章的唯一标识 | String | 必填\n初始化 在用户发布文章时初始化为随机值\n\n\n# - authorID 【绑定值】\n\n定义 这篇文章的作者标识 | String | 必填\n初始化 在用户发布文章时初始化，值绝对等于 userList 表中的 userID\n\n\n# - articleTitle\n\n定义 文章标题 | String | 必填 | 限 13 个字\n初始化 在用户发布文章时初始化，初始值为用户填写的标题\n\n\n# - articleTag\n\n定义 文章的标签 | String | 不必填 | 限 6 个字\n初始化 在用户发布时初始化，初始化值为用户填写的标签\n\n\n# - desc\n\n定义 文章的内容 | String | 必填 | 经验贴限制为 900 字，问答贴限为 100 字\n初始化 在用户发布时初始化，初始化值为用户填写内容\n\n\n# - time\n\n定义 文章发布的时间 | Date | 必填\n初始化 在用户发布时初始化，初始值为用户发布的时间\n\n\n# - type\n\n定义 文章的类型 | Number | 必填 | 1：经验贴；2：问答贴\n初始化 在用户发布时初始化，根据用户选择的发布类型决定\n\n\n# - number\n\n定义 经验的收藏数或问答的回答数 | Number | 必填\n初始化 在用户发布时初始化，初始化为 0\n可能引起变化\n1.用户点赞收藏经验贴+1.\n2.用户回答问答贴时，评论数增加时+1.\n\n\n# - commentList\n\n定义 评论列表 | List[object,...] | 必填\n初始化 在用户发布时初始化，初始化为 []\n可能引起变化 当文章有人评论时，添加一个对象。对象的格式如下：\n\n{\n  userID:\"\",  // 评论者的ID\n  userName:\"\", // 评论者的昵称\n  content:\"\", // 评论的内容\n  time:\"2022-10-07 20:04\" // 评论时间\n}\n\n\n\n# - imageList\n\n定义 图片列表 | List | 选填\n初始化 在用户发布时初始化，初始化为 [] 可能引起变化\n用户发布贴子时，添加了图片。最多四条。示例：\n\n[\n  \"sdrgtheyjryjyrjyyjyjt.jpg\",\n  \"dsfvrfrrgrgerrgr.jpg\",\n  \"shkefuierhgfuirhufueh.jpg\",\n  \"dekroiuf7hdiew38.jpg\"\n]\n",
      "normalizedContent": "# 数据库设计\n\n\n# 表 1：userlist\n\n> 用户表\n\n\n# - userid 【关键码】\n\n定义 用户唯一 id | string | 必填\n初始化 在用户首次登陆时写入，来自微信提供的 api 接口（openid）\n\n\n# - username\n\n定义 用户昵称 | string | 必填\n初始化 在用户首次登陆时写入，来自微信提供的 api 接口（微信昵称）\n\n\n# - useravater\n\n定义 用户头像的链接 | string | 必填\n初始化 在用户首次登陆时写入，来自微信提供的 api 接口\n\n\n# - expcre\n\n定义 用户经验积分 | number | 必填\n初始化 在用户首次登陆时写入，初始化为 0\n可能引起变动\n1.用户点击收藏一个经验贴，+10。\n2.用户发表一篇经验，+30。\n\n\n# - likecre\n\n定义 用户赞赏积分 | number | 必填\n初始化 在用户首次登陆时写入，初始化为 0\n可能引起变动\n1.用户发表的经验贴被点赞，+30。\n\n\n# - collectnum\n\n定义 用户收藏的贴子数 | number | 必填\n初始化 在用户首次登陆时写入，初始化为 0\n可能引起变动\n1.用户点击收藏一篇经验贴时+1。\n2.用户点击收藏一篇问答贴时+1。\n\n\n# - collectlist\n\n定义 用户收藏的帖子列表 | list[object,...] | 必填\n初始化 在用户首次登陆时写入，初始化为 []\n可能引起变动\n1.用户点击收藏一篇经验贴时在数组中添加一个对象。\n2.用户点击收藏一篇问答贴时在数组中添加一个对象。\n子对象\n存放在数组中的对象。示例：\n\n{\n  articleid:\"dwgrgh\",\n  articletitle:\"这是一个标题\",\n  type:1,\n}\n\n\n\n# - createlist\n\n定义 用户发表的文章列表 | list[object,...] | 必填\n初始化 在用户首次登陆时写入，初始化为 []\n可能引起变动\n1.用户点击发布一篇经验贴时在数组中添加一个对象。\n2.用户点击发布一篇问答贴时在数组中添加一个对象。\n子对象\n存放在数组中的对象。示例：\n\n{\n  articleid:\"dwgrgh\",\n  articletitle:\"这是一个标题\",\n  type:1,\n}\n\n\n\n# - aim\n\n定义 用户的目标字段 | object | 必填\n初始化 在用户首次登陆时写入，初始化为下例\n可能引起变动\n用户修改目标页面的参数时操作数据库修改。\n对象值\n\naim:{\n    aimtitle:\"我的目标\",\n    aimdesc:\"我的目标描述\",\n    begindate: 2022-10-11,\n    enddate:2024-10-11\n  }\n\n\n\n# userlist 数据表 json 示例\n\n这是一条数据：\n\n{\n  username:\"\",  // 用户昵称\n  useravater:\"\",  // 用户头像链接\n  userid:\"\", // 用户唯一标识符（openid）\n  expcre:100, // 用户的经验积分\n  likecre:50, // 用户的赞赏值\n  collectnum:10, // 用户的收藏数\n  collectlist:[\n    {\n      articleid:\"dwgrgh\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleid:\"fewgrrg\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    //...\n  ],\n  createlist:[\n    {\n      articleid:\"dwgrgh\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleid:\"fewgrrg\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleid:\"effrgh\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    //...\n  ],\n  aim:{\n    aimtitle:\"我的目标\",\n    aimdesc:\"我的目标描述\",\n    begindate: 2022-10-11,\n    enddate:2024-10-11\n  }\n}\n\n\n\n# 表 2：articlelist\n\n> 文章数据表\n\n\n# - articleid 【关键码】\n\n定义 文章的唯一标识 | string | 必填\n初始化 在用户发布文章时初始化为随机值\n\n\n# - authorid 【绑定值】\n\n定义 这篇文章的作者标识 | string | 必填\n初始化 在用户发布文章时初始化，值绝对等于 userlist 表中的 userid\n\n\n# - articletitle\n\n定义 文章标题 | string | 必填 | 限 13 个字\n初始化 在用户发布文章时初始化，初始值为用户填写的标题\n\n\n# - articletag\n\n定义 文章的标签 | string | 不必填 | 限 6 个字\n初始化 在用户发布时初始化，初始化值为用户填写的标签\n\n\n# - desc\n\n定义 文章的内容 | string | 必填 | 经验贴限制为 900 字，问答贴限为 100 字\n初始化 在用户发布时初始化，初始化值为用户填写内容\n\n\n# - time\n\n定义 文章发布的时间 | date | 必填\n初始化 在用户发布时初始化，初始值为用户发布的时间\n\n\n# - type\n\n定义 文章的类型 | number | 必填 | 1：经验贴；2：问答贴\n初始化 在用户发布时初始化，根据用户选择的发布类型决定\n\n\n# - number\n\n定义 经验的收藏数或问答的回答数 | number | 必填\n初始化 在用户发布时初始化，初始化为 0\n可能引起变化\n1.用户点赞收藏经验贴+1.\n2.用户回答问答贴时，评论数增加时+1.\n\n\n# - commentlist\n\n定义 评论列表 | list[object,...] | 必填\n初始化 在用户发布时初始化，初始化为 []\n可能引起变化 当文章有人评论时，添加一个对象。对象的格式如下：\n\n{\n  userid:\"\",  // 评论者的id\n  username:\"\", // 评论者的昵称\n  content:\"\", // 评论的内容\n  time:\"2022-10-07 20:04\" // 评论时间\n}\n\n\n\n# - imagelist\n\n定义 图片列表 | list | 选填\n初始化 在用户发布时初始化，初始化为 [] 可能引起变化\n用户发布贴子时，添加了图片。最多四条。示例：\n\n[\n  \"sdrgtheyjryjyrjyyjyjt.jpg\",\n  \"dsfvrfrrgrgerrgr.jpg\",\n  \"shkefuierhgfuirhufueh.jpg\",\n  \"dekroiuf7hdiew38.jpg\"\n]\n",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "页面功能说明",
      "frontmatter": {
        "title": "页面功能说明",
        "date": "2022-10-07T00:00:00.000Z"
      },
      "regularPath": "/guide/czh.html",
      "relativePath": "guide/czh.md",
      "key": "v-3bb9c22a",
      "path": "/guide/czh.html",
      "headers": [
        {
          "level": 2,
          "title": "1.登录页面 @wcq",
          "slug": "_1-登录页面-wcq",
          "normalizedTitle": "1.登录页面 @wcq",
          "charIndex": 36
        },
        {
          "level": 2,
          "title": "2.搜索页面 @wcq",
          "slug": "_2-搜索页面-wcq",
          "normalizedTitle": "2.搜索页面 @wcq",
          "charIndex": 293
        },
        {
          "level": 2,
          "title": "3.我的页面 @wcq",
          "slug": "_3-我的页面-wcq",
          "normalizedTitle": "3.我的页面 @wcq",
          "charIndex": 688
        },
        {
          "level": 3,
          "title": "头像",
          "slug": "头像",
          "normalizedTitle": "头像",
          "charIndex": 65
        },
        {
          "level": 3,
          "title": "退出登录",
          "slug": "退出登录",
          "normalizedTitle": "退出登录",
          "charIndex": 745
        },
        {
          "level": 3,
          "title": "经验、赞赏、收藏",
          "slug": "经验、赞赏、收藏",
          "normalizedTitle": "经验、赞赏、收藏",
          "charIndex": 789
        },
        {
          "level": 3,
          "title": "四个模块",
          "slug": "四个模块",
          "normalizedTitle": "四个模块",
          "charIndex": 1098
        },
        {
          "level": 2,
          "title": "4.经验页面 @wcy",
          "slug": "_4-经验页面-wcy",
          "normalizedTitle": "4.经验页面 @wcy",
          "charIndex": 1157
        },
        {
          "level": 2,
          "title": "5.QA 页面 @wcy",
          "slug": "_5-qa-页面-wcy",
          "normalizedTitle": "5.qa 页面 @wcy",
          "charIndex": 1252
        },
        {
          "level": 2,
          "title": "6.经验详情页面 @wcy",
          "slug": "_6-经验详情页面-wcy",
          "normalizedTitle": "6.经验详情页面 @wcy",
          "charIndex": 1274
        },
        {
          "level": 2,
          "title": "7.问答详情页面 @wcy",
          "slug": "_7-问答详情页面-wcy",
          "normalizedTitle": "7.问答详情页面 @wcy",
          "charIndex": 2317
        },
        {
          "level": 2,
          "title": "8.我的经验 @syf",
          "slug": "_8-我的经验-syf",
          "normalizedTitle": "8.我的经验 @syf",
          "charIndex": 2359
        },
        {
          "level": 2,
          "title": "9.我的问答 @syf",
          "slug": "_9-我的问答-syf",
          "normalizedTitle": "9.我的问答 @syf",
          "charIndex": 2992
        },
        {
          "level": 2,
          "title": "10.我的收藏 @syf",
          "slug": "_10-我的收藏-syf",
          "normalizedTitle": "10.我的收藏 @syf",
          "charIndex": 3013
        },
        {
          "level": 2,
          "title": "11.我的目标页面 @sn",
          "slug": "_11-我的目标页面-sn",
          "normalizedTitle": "11.我的目标页面 @sn",
          "charIndex": 3054
        }
      ],
      "headersStr": "1.登录页面 @wcq 2.搜索页面 @wcq 3.我的页面 @wcq 头像 退出登录 经验、赞赏、收藏 四个模块 4.经验页面 @wcy 5.QA 页面 @wcy 6.经验详情页面 @wcy 7.问答详情页面 @wcy 8.我的经验 @syf 9.我的问答 @syf 10.我的收藏 @syf 11.我的目标页面 @sn",
      "content": "# 页面功能说明\n\n> 带*代表暂时还无法实现，先实现其他的。\n\n\n# 1.登录页面 @wcq\n\n微信一键登录 API，获取用户的头像和昵称以及 openid 用于标识用户。\n\n参考链接\n\n*完成登陆后，向全局逻辑传递数据 App.js ，用于 我的 页面的数据。同时判断云开发数据库中是否以及存在这个用户的信息。if 存在，忽略；if 不存在，写入云数据库（userData）用户的信息。包含：\n\n{\n  userName:\"\",  // 用户昵称\n  userAvater:\"\",  // 用户头像链接\n  userID:\"\", // 用户唯一标识符（openid）\n}\n\n\n\n# 2.搜索页面 @wcq\n\n搜索框先写一个摆设。\n\n搜索结果参照 @wcy 写的内容卡片。但是要根据后台来的数据做判断，后台会返回这样的一些数据：\n\n[\n  {\n    articleID:\"\", // 文章的ID，用于唯一辨识文章\n    authorID:\"\",// 文章的作者ID\n    articleTitle:\"\", // 文章的标题\n    articleTag:\"\", // 文章tag中的内容\n    desc:\"\",// 文章的内容\n    time:\"\",// 文章发表的时间\n    type:1, // 文章类型，1：经验，2：问答\n    number:50, // 文章的点赞数或者是问答的回答数\n  },\n  // ... 其余数据\n]\n\n\n如果 type===1 渲染为蓝色卡片，如果 type===2 渲染为橙色卡片。提示使用 wx:if 实现。\n\n\n# 3.我的页面 @wcq\n\n\n# 头像\n\n获取登录页面传来 App.js 的数据，渲染在页面上头像和昵称。\n\n\n# 退出登录\n\n点击退出登陆后注销小程序账号，返回登录页面，详见：\n\n退出登录参考\n\n\n# 经验、赞赏、收藏\n\n*根据获取到的 App.js 中的用户 ID 到数据库查询用户的经验数、赞赏值、收藏数。经验数和赞赏不用做点击跳转，收藏需要，跳转到下面的我的收藏界面。(还没有数据库时先在 js 中模拟数据)，后台返回的一条用户数据如下：\n\n{\n  userName:\"\",  // 用户昵称\n  userAvater:\"\",  // 用户头像链接\n  userID:\"\", // 用户唯一标识符（openid）\n  expCre:100, // 用户的经验积分\n  likeCre:50, // 用户的赞赏值\n  collectNum:10, // 用户的收藏数\n  // ... 其他无关的字段\n}\n\n\n\n# 四个模块\n\n分别将四个模块保存为 4x 的图片，用 css 写成两行两列的格式，每张图上都要预留跳转的接口。\n\n\n# 4.经验页面 @wcy\n\n首先是后台数据库返回的所有经验贴子，要进行分页（触底加载更多）。\n\n触底加载参考\n\n右下角有一个 fix 的发布按钮，点击进入发布界面，发布按钮保持不动。\n\n\n# 5.QA 页面 @wcy\n\n同上。\n\n\n# 6.经验详情页面 @wcy\n\n整个页面作为复用页面，从上面的页面跳转来时，同时传入文章 ID 参数。利用这个参数来查询具体的文章内容。左下角的点赞按钮，数据库中的 number 字段自加 1.并且在经验页面点赞后，点赞者的经验值（expCre）+10.并在用户 CollectList 中添加文章的 ID\n\n文章数据库结构：\n\n[\n  {\n    articleID:\"\", // 文章的ID，用于唯一辨识文章\n    authorID:\"\",// 文章的作者ID\n    articleTitle:\"\", // 文章的标题\n    articleTag:\"\", // 文章tag中的内容\n    desc:\"\",// 文章的内容\n    time:\"\",// 文章发表的时间\n    type:1, // 文章类型，1：经验，2：问答\n    number:50, // 文章的点赞数或者是问答的回答数\n    commentList:[\n      \"qenh76feq72eguyguybw\",  // 评论的ID\n      \"38hwfuig723hiudnuihh\",\n      //...\n    ] // 评论\n    //...\n  },\n  // ... 其余数据\n]\n\n\n用户数据库结构：\n\n{\n  userName:\"\",  // 用户昵称\n  userAvater:\"\",  // 用户头像链接\n  userID:\"\", // 用户唯一标识符（openid）\n  expCre:100, // 用户的经验积分\n  likeCre:50, // 用户的赞赏值\n  collectNum:10, // 用户的收藏数\n  CollectList:[\n    \"wefrgthryj\",\n    \"wefwrrgeth\",\n    //...\n  ]\n  // ... 其他无关的字段\n}\n\n\n在文章下方有评论页面，通过文章的 ID 查询所有属于它的评论并显示。用户发表评论后，在评论数据库中新增一条评论数据，并更新文章的 commentList 列表。\n\n评论的字段：\n\n{\n  commentID:\"\",// 唯一标识\n  articleID:\"\",// 标记属于哪篇文章\n  userID:\"\",// 标记创建者\n  userName:\"\",// 标记创建者的姓名\n  time:\"\",// 标记创建时间\n  desc:\"\"// 评论的详细内容\n}\n\n\n\n# 7.问答详情页面 @wcy\n\n同上，不过问答左下角的按钮不加分但放入收藏。\n\n\n# 8.我的经验 @syf\n\n先从 App.js 中获取当前用户的 ID，再从数据库中查询当前用户的发表的文章(user 数据表中 CreateList 字段)，用户的信息：\n\n{\n  userName:\"\",  // 用户昵称\n  userAvater:\"\",  // 用户头像链接\n  userID:\"\", // 用户唯一标识符（openid）\n  expCre:100, // 用户的经验积分\n  likeCre:50, // 用户的赞赏值\n  collectNum:10, // 用户的收藏数\n  CollectList:[\n    \"wefrgthryj\",\n    \"wefwrrgeth\",\n    //...\n  ],\n  CreateList:[\n    {\n      articleID:\"dwgrgh\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleID:\"fewgrrg\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleID:\"effrgh\",\n      articleTitle:\"这是一个标题\",\n      type:1,\n    },\n    //...\n  ]\n  // ... 其他无关的字段\n}\n\n\n拿到字段值后通过列表渲染显示。\n\n\n# 9.我的问答 @syf\n\n同上。\n\n\n# 10.我的收藏 @syf\n\n同上，不过要根据 type 渲染不同的颜色。\n\n\n# 11.我的目标页面 @sn\n\n先从 App.js 中获取当前用户的 ID，再从数据库中查询当前用户的目标字段。\n\n{\n  userName:\"\",  // 用户昵称\n  userAvater:\"\",  // 用户头像链接\n  userID:\"\", // 用户唯一标识符（openid）\n  expCre:100, // 用户的经验积分\n  likeCre:50, // 用户的赞赏值\n  collectNum:10, // 用户的收藏数\n  aim:{\n    aimTitle:\"目标标题\",\n    aimDesc:\"目标描述\",\n    beginDate: 2022-10-11,\n    endDate:2024-10-11\n  }\n  // ... 其他无关的字段\n}\n\n\n实现倒计时，倒计时参考代码：\n\ncountDown: function () {\n        let that = this;\n\n        that.setData({\n            timer: setInterval(function () {\n\n                var lefttime = parseInt((-new Date(that.data.jssj.replace(/\n                -/g, \"/\")).getTime() + new Date().getTime()));\n\n                var d = parseInt(lefttime / 1000 / 3600 / 24); //天数\n                var h = parseInt(lefttime / 1000 / 3600 % 24); //小时\n                var m = parseInt(lefttime / 1000 / 60 % 60); //分钟\n                var s = parseInt(lefttime / 1000 % 60); //当前的秒\n\n                d < 10 ? d = \"0\" + d : d;\n                h < 10 ? h = \"0\" + h : h;\n                m < 10 ? m = \"0\" + m : m;\n                s < 10 ? s = \"0\" + s : s;\n\n                that.setData({\n                    qgdjs_jo: {\n                        day: d,\n                        hour: h,\n                        min: m,\n                        sec: s\n                    }\n                })\n            }, 1000)\n        })\n    },\n",
      "normalizedContent": "# 页面功能说明\n\n> 带*代表暂时还无法实现，先实现其他的。\n\n\n# 1.登录页面 @wcq\n\n微信一键登录 api，获取用户的头像和昵称以及 openid 用于标识用户。\n\n参考链接\n\n*完成登陆后，向全局逻辑传递数据 app.js ，用于 我的 页面的数据。同时判断云开发数据库中是否以及存在这个用户的信息。if 存在，忽略；if 不存在，写入云数据库（userdata）用户的信息。包含：\n\n{\n  username:\"\",  // 用户昵称\n  useravater:\"\",  // 用户头像链接\n  userid:\"\", // 用户唯一标识符（openid）\n}\n\n\n\n# 2.搜索页面 @wcq\n\n搜索框先写一个摆设。\n\n搜索结果参照 @wcy 写的内容卡片。但是要根据后台来的数据做判断，后台会返回这样的一些数据：\n\n[\n  {\n    articleid:\"\", // 文章的id，用于唯一辨识文章\n    authorid:\"\",// 文章的作者id\n    articletitle:\"\", // 文章的标题\n    articletag:\"\", // 文章tag中的内容\n    desc:\"\",// 文章的内容\n    time:\"\",// 文章发表的时间\n    type:1, // 文章类型，1：经验，2：问答\n    number:50, // 文章的点赞数或者是问答的回答数\n  },\n  // ... 其余数据\n]\n\n\n如果 type===1 渲染为蓝色卡片，如果 type===2 渲染为橙色卡片。提示使用 wx:if 实现。\n\n\n# 3.我的页面 @wcq\n\n\n# 头像\n\n获取登录页面传来 app.js 的数据，渲染在页面上头像和昵称。\n\n\n# 退出登录\n\n点击退出登陆后注销小程序账号，返回登录页面，详见：\n\n退出登录参考\n\n\n# 经验、赞赏、收藏\n\n*根据获取到的 app.js 中的用户 id 到数据库查询用户的经验数、赞赏值、收藏数。经验数和赞赏不用做点击跳转，收藏需要，跳转到下面的我的收藏界面。(还没有数据库时先在 js 中模拟数据)，后台返回的一条用户数据如下：\n\n{\n  username:\"\",  // 用户昵称\n  useravater:\"\",  // 用户头像链接\n  userid:\"\", // 用户唯一标识符（openid）\n  expcre:100, // 用户的经验积分\n  likecre:50, // 用户的赞赏值\n  collectnum:10, // 用户的收藏数\n  // ... 其他无关的字段\n}\n\n\n\n# 四个模块\n\n分别将四个模块保存为 4x 的图片，用 css 写成两行两列的格式，每张图上都要预留跳转的接口。\n\n\n# 4.经验页面 @wcy\n\n首先是后台数据库返回的所有经验贴子，要进行分页（触底加载更多）。\n\n触底加载参考\n\n右下角有一个 fix 的发布按钮，点击进入发布界面，发布按钮保持不动。\n\n\n# 5.qa 页面 @wcy\n\n同上。\n\n\n# 6.经验详情页面 @wcy\n\n整个页面作为复用页面，从上面的页面跳转来时，同时传入文章 id 参数。利用这个参数来查询具体的文章内容。左下角的点赞按钮，数据库中的 number 字段自加 1.并且在经验页面点赞后，点赞者的经验值（expcre）+10.并在用户 collectlist 中添加文章的 id\n\n文章数据库结构：\n\n[\n  {\n    articleid:\"\", // 文章的id，用于唯一辨识文章\n    authorid:\"\",// 文章的作者id\n    articletitle:\"\", // 文章的标题\n    articletag:\"\", // 文章tag中的内容\n    desc:\"\",// 文章的内容\n    time:\"\",// 文章发表的时间\n    type:1, // 文章类型，1：经验，2：问答\n    number:50, // 文章的点赞数或者是问答的回答数\n    commentlist:[\n      \"qenh76feq72eguyguybw\",  // 评论的id\n      \"38hwfuig723hiudnuihh\",\n      //...\n    ] // 评论\n    //...\n  },\n  // ... 其余数据\n]\n\n\n用户数据库结构：\n\n{\n  username:\"\",  // 用户昵称\n  useravater:\"\",  // 用户头像链接\n  userid:\"\", // 用户唯一标识符（openid）\n  expcre:100, // 用户的经验积分\n  likecre:50, // 用户的赞赏值\n  collectnum:10, // 用户的收藏数\n  collectlist:[\n    \"wefrgthryj\",\n    \"wefwrrgeth\",\n    //...\n  ]\n  // ... 其他无关的字段\n}\n\n\n在文章下方有评论页面，通过文章的 id 查询所有属于它的评论并显示。用户发表评论后，在评论数据库中新增一条评论数据，并更新文章的 commentlist 列表。\n\n评论的字段：\n\n{\n  commentid:\"\",// 唯一标识\n  articleid:\"\",// 标记属于哪篇文章\n  userid:\"\",// 标记创建者\n  username:\"\",// 标记创建者的姓名\n  time:\"\",// 标记创建时间\n  desc:\"\"// 评论的详细内容\n}\n\n\n\n# 7.问答详情页面 @wcy\n\n同上，不过问答左下角的按钮不加分但放入收藏。\n\n\n# 8.我的经验 @syf\n\n先从 app.js 中获取当前用户的 id，再从数据库中查询当前用户的发表的文章(user 数据表中 createlist 字段)，用户的信息：\n\n{\n  username:\"\",  // 用户昵称\n  useravater:\"\",  // 用户头像链接\n  userid:\"\", // 用户唯一标识符（openid）\n  expcre:100, // 用户的经验积分\n  likecre:50, // 用户的赞赏值\n  collectnum:10, // 用户的收藏数\n  collectlist:[\n    \"wefrgthryj\",\n    \"wefwrrgeth\",\n    //...\n  ],\n  createlist:[\n    {\n      articleid:\"dwgrgh\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleid:\"fewgrrg\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    {\n      articleid:\"effrgh\",\n      articletitle:\"这是一个标题\",\n      type:1,\n    },\n    //...\n  ]\n  // ... 其他无关的字段\n}\n\n\n拿到字段值后通过列表渲染显示。\n\n\n# 9.我的问答 @syf\n\n同上。\n\n\n# 10.我的收藏 @syf\n\n同上，不过要根据 type 渲染不同的颜色。\n\n\n# 11.我的目标页面 @sn\n\n先从 app.js 中获取当前用户的 id，再从数据库中查询当前用户的目标字段。\n\n{\n  username:\"\",  // 用户昵称\n  useravater:\"\",  // 用户头像链接\n  userid:\"\", // 用户唯一标识符（openid）\n  expcre:100, // 用户的经验积分\n  likecre:50, // 用户的赞赏值\n  collectnum:10, // 用户的收藏数\n  aim:{\n    aimtitle:\"目标标题\",\n    aimdesc:\"目标描述\",\n    begindate: 2022-10-11,\n    enddate:2024-10-11\n  }\n  // ... 其他无关的字段\n}\n\n\n实现倒计时，倒计时参考代码：\n\ncountdown: function () {\n        let that = this;\n\n        that.setdata({\n            timer: setinterval(function () {\n\n                var lefttime = parseint((-new date(that.data.jssj.replace(/\n                -/g, \"/\")).gettime() + new date().gettime()));\n\n                var d = parseint(lefttime / 1000 / 3600 / 24); //天数\n                var h = parseint(lefttime / 1000 / 3600 % 24); //小时\n                var m = parseint(lefttime / 1000 / 60 % 60); //分钟\n                var s = parseint(lefttime / 1000 % 60); //当前的秒\n\n                d < 10 ? d = \"0\" + d : d;\n                h < 10 ? h = \"0\" + h : h;\n                m < 10 ? m = \"0\" + m : m;\n                s < 10 ? s = \"0\" + s : s;\n\n                that.setdata({\n                    qgdjs_jo: {\n                        day: d,\n                        hour: h,\n                        min: m,\n                        sec: s\n                    }\n                })\n            }, 1000)\n        })\n    },\n",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "github 协作",
      "frontmatter": {
        "title": "github 协作",
        "date": "2022-10-06T00:00:00.000Z"
      },
      "regularPath": "/guide/git.html",
      "relativePath": "guide/git.md",
      "key": "v-f10d8d6a",
      "path": "/guide/git.html",
      "headers": [
        {
          "level": 2,
          "title": "同意项目邀请",
          "slug": "同意项目邀请",
          "normalizedTitle": "同意项目邀请",
          "charIndex": 52
        },
        {
          "level": 2,
          "title": "下载使用 GitHub Desktop",
          "slug": "下载使用-github-desktop",
          "normalizedTitle": "下载使用 github desktop",
          "charIndex": 133
        },
        {
          "level": 2,
          "title": "克隆项目",
          "slug": "克隆项目",
          "normalizedTitle": "克隆项目",
          "charIndex": 182
        },
        {
          "level": 2,
          "title": "不再在右上角的版本管理中进行版本控制",
          "slug": "不再在右上角的版本管理中进行版本控制",
          "normalizedTitle": "不再在右上角的版本管理中进行版本控制",
          "charIndex": 380
        },
        {
          "level": 2,
          "title": "添加分支",
          "slug": "添加分支",
          "normalizedTitle": "添加分支",
          "charIndex": 403
        },
        {
          "level": 2,
          "title": "pull代码",
          "slug": "pull代码",
          "normalizedTitle": "pull代码",
          "charIndex": 542
        },
        {
          "level": 2,
          "title": "push代码",
          "slug": "push代码",
          "normalizedTitle": "push代码",
          "charIndex": 668
        },
        {
          "level": 2,
          "title": "请求合并",
          "slug": "请求合并",
          "normalizedTitle": "请求合并",
          "charIndex": 775
        }
      ],
      "headersStr": "同意项目邀请 下载使用 GitHub Desktop 克隆项目 不再在右上角的版本管理中进行版本控制 添加分支 pull代码 push代码 请求合并",
      "content": "# github 协作\n\n> 由于微信 git 存在的问题。所以使用 github 进行协作。\n\n\n# 同意项目邀请\n\n首先你需要加入项目，同意项目邀请。\n\n打开Github主页，在头像下拉栏找到消息通知。\n点击Join，即可加入。\n\n加入成功如图所示：\n\n\n\n# 下载使用 GitHub Desktop\n\n访问Github Desktop并安装到桌面。\n\n\n# 克隆项目\n\n不管你在之前的项目中有何更改，请在这里重新克隆项目。然后把你修改的代码贴过来。\n\n打开下载好的Github Desktop，点击选择File-clone。\n\n选择URL，填写仓库的地址。\n\n在仓库的主页进行获取。\n\n创建本地的空文件夹。\n\n\n\n然后点击克隆。\n克隆过程：\n\n克隆成功后在相应的文件夹可以找到源代码了。\n\n用微信开发工具打开这个项目即可。\n打开之后如图所示。\n\n\n\n# 不再在右上角的版本管理中进行版本控制\n\n\n# 添加分支\n\n在 GitHub Desktop 中，点击左上角的Current branch，然后点击New branch。\n\n\n\n在今后的编辑中，你将在这个分支中进行。\n\n\n\n选择你的分支，然后点击Publish branch。\n\n\n\n在仓库页面即可看到你的分支。\n\n\n\n\n# pull代码\n\n在你每次开始编写代码前，请先pull master 分支的代码。打开 GitHub Desktop，切换为 master 分支在上面的菜单栏中选择Respository，然后点击pull。\n\n\n\n或者分支有更新时也会提醒。\n\n\n\n\n# push代码\n\n在你每次完成代码编写后，请先push你的代码。打开 GitHub Desktop，填写你的提交信息，然后点击Commit to xxx(你的分支)。\n\n\n\n点击Push origin。\n\n\n\n\n# 请求合并\n\n\n仓库主页会提示你进行合并，点击合并即可。\n\n写一下评论，点击提交。\n\n下面即代表提交成功。\n\n提交完合成后，你可以告诉你的管理员。",
      "normalizedContent": "# github 协作\n\n> 由于微信 git 存在的问题。所以使用 github 进行协作。\n\n\n# 同意项目邀请\n\n首先你需要加入项目，同意项目邀请。\n\n打开github主页，在头像下拉栏找到消息通知。\n点击join，即可加入。\n\n加入成功如图所示：\n\n\n\n# 下载使用 github desktop\n\n访问github desktop并安装到桌面。\n\n\n# 克隆项目\n\n不管你在之前的项目中有何更改，请在这里重新克隆项目。然后把你修改的代码贴过来。\n\n打开下载好的github desktop，点击选择file-clone。\n\n选择url，填写仓库的地址。\n\n在仓库的主页进行获取。\n\n创建本地的空文件夹。\n\n\n\n然后点击克隆。\n克隆过程：\n\n克隆成功后在相应的文件夹可以找到源代码了。\n\n用微信开发工具打开这个项目即可。\n打开之后如图所示。\n\n\n\n# 不再在右上角的版本管理中进行版本控制\n\n\n# 添加分支\n\n在 github desktop 中，点击左上角的current branch，然后点击new branch。\n\n\n\n在今后的编辑中，你将在这个分支中进行。\n\n\n\n选择你的分支，然后点击publish branch。\n\n\n\n在仓库页面即可看到你的分支。\n\n\n\n\n# pull代码\n\n在你每次开始编写代码前，请先pull master 分支的代码。打开 github desktop，切换为 master 分支在上面的菜单栏中选择respository，然后点击pull。\n\n\n\n或者分支有更新时也会提醒。\n\n\n\n\n# push代码\n\n在你每次完成代码编写后，请先push你的代码。打开 github desktop，填写你的提交信息，然后点击commit to xxx(你的分支)。\n\n\n\n点击push origin。\n\n\n\n\n# 请求合并\n\n\n仓库主页会提示你进行合并，点击合并即可。\n\n写一下评论，点击提交。\n\n下面即代表提交成功。\n\n提交完合成后，你可以告诉你的管理员。",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "云开发：数据库和云存储操作",
      "frontmatter": {
        "title": "云开发：数据库和云存储操作",
        "date": "2022-10-06T00:00:00.000Z"
      },
      "regularPath": "/guide/databaseMethods.html",
      "relativePath": "guide/databaseMethods.md",
      "key": "v-0ed1142b",
      "path": "/guide/databaseMethods.html",
      "headers": [
        {
          "level": 2,
          "title": "数据库结构",
          "slug": "数据库结构",
          "normalizedTitle": "数据库结构",
          "charIndex": 20
        },
        {
          "level": 2,
          "title": "数据库基本操作",
          "slug": "数据库基本操作",
          "normalizedTitle": "数据库基本操作",
          "charIndex": 1208
        },
        {
          "level": 3,
          "title": "简述",
          "slug": "简述",
          "normalizedTitle": "简述",
          "charIndex": 1220
        },
        {
          "level": 3,
          "title": "初始化数据库",
          "slug": "初始化数据库",
          "normalizedTitle": "初始化数据库",
          "charIndex": 1910
        },
        {
          "level": 3,
          "title": "插入数据",
          "slug": "插入数据",
          "normalizedTitle": "插入数据",
          "charIndex": 2514
        },
        {
          "level": 3,
          "title": "查询数据",
          "slug": "查询数据",
          "normalizedTitle": "查询数据",
          "charIndex": 1436
        },
        {
          "level": 3,
          "title": "查询指令",
          "slug": "查询指令",
          "normalizedTitle": "查询指令",
          "charIndex": 4863
        },
        {
          "level": 3,
          "title": "更新数据",
          "slug": "更新数据",
          "normalizedTitle": "更新数据",
          "charIndex": 5991
        },
        {
          "level": 3,
          "title": "删除数据",
          "slug": "删除数据",
          "normalizedTitle": "删除数据",
          "charIndex": 6692
        },
        {
          "level": 2,
          "title": "云存储",
          "slug": "云存储",
          "normalizedTitle": "云存储",
          "charIndex": 10
        }
      ],
      "headersStr": "数据库结构 数据库基本操作 简述 初始化数据库 插入数据 查询数据 查询指令 更新数据 删除数据 云存储",
      "content": "# 云开发：数据库和云存储操作\n\n\n# 数据库结构\n\n云开发提供了一个 JSON 数据库，顾名思义，数据库中的每条记录都是一个 JSON 格式的对象。一个数据库可以有多个集合（相当于关系型数据中的表），集合可看做一个 JSON 数组，数组中的每个对象就是一条记录，记录的格式是 JSON 对象。\n\n关系型数据库和 JSON 数据库的概念对应关系如下表：\n\n\n\n以下是一个示例的集合数据，假设我们有一个 books 集合存放了图书记录，其中有两本书：\n\n[\n  {\n    \"_id\": \"Wzh76lk5_O_dt0vO\",\n    \"title\": \"The Catcher in the Rye\",\n    \"author\": \"J. D. Salinger\",\n    \"characters\": [\n      \"Holden Caulfield\",\n      \"Stradlater\",\n      \"Mr. Antolini\"\n    ],\n    \"publishInfo\": {\n      \"year\": 1951,\n      \"country\": \"United States\"\n    }\n  },\n  {\n    \"_id\": \"Wzia0lk5_O_dt0vR\",\n    \"_openid\": \"ohl4L0Rnhq7vmmbT_DaNQa4ePaz0\",\n    \"title\": \"The Lady of the Camellias\",\n    \"author\": \"Alexandre Dumas fils\",\n    \"characters\": [\n      \"Marguerite Gautier\",\n      \"Armand Duval\",\n      \"Prudence\",\n      \"Count de Varville\"\n    ],\n    \"publishInfo\": {\n      \"year\": 1848,\n      \"country\": \"France\"\n    }\n  }\n]\n\n\n在图书信息中，我们用 title, author 来记录图书标题和作者，用 characters 数组来记录书中的主要人物，用 publishInfo 来记录图书的出版信息。在其中我们可以看到，字段既可以是字符串或数字，还可以是对象或数组，就是一个 JSON 对象。\n\n每条记录都有一个 _id 字段用以唯一标志一条记录、一个_openid 字段用以标志记录的创建者，即小程序的用户。需要特别注意的是，在管理端（控制台和云函数）中创建的不会有 _openid 字段，因为这是属于管理员创建的记录。开发者可以自定义_id，但不可自定义和修改 _openid 。_openid 是在文档创建时由系统根据小程序用户默认创建的，开发者可使用其来标识和定位文档。\n\n\n# 数据库基本操作\n\n\n# 简述\n\n数据库 API 分为小程序端和服务端两部分，小程序端 API 拥有严格的调用权限控制，开发者可在小程序内直接调用 API 进行非敏感数据的操作。对于有更高安全要求的数据，可在云函数内通过服务端 API 进行操作。云函数的环境是与客户端完全隔离的，在云函数上可以私密且安全的操作数据库。\n\n数据库 API 包含增删改查的能力，使用 API 操作数据库只需三步：获取数据库引用、构造查询/更新条件、发出请求。以下是一个在小程序中查询数据库的发表于美国的图书记录的例子：\n\n// 1. 获取数据库引用\nconst db = wx.cloud.database()\n// 2. 构造查询语句\n// collection 方法获取一个集合的引用\n// where 方法传入一个对象，数据库返回集合中字段等于指定值的 JSON 文档。\n// API 也支持高级的查询条件（比如大于、小于、in 等），具体见文档查看支持列表\n// get 方法会触发网络请求，往数据库取数据\ndb.collection('books').where({\n  publishInfo: {\n    country: 'United States'    // 限定查询条件为美国出版的图书\n  }\n}).get({\n  success: function(res) {\n  // 输出 [{ \"title\": \"The Catcher in the Rye\", ... }]\n  console.log(res)\n }\n})\n\n\n在我们实际应用中，可以使用这个查询语句来查询某位用户所有的贴子。\n\n\n# 初始化数据库\n\n在你的js文件中，首先需要引入数据库的SDK：\n\nconst db = wx.cloud.database()\n\n\n如需获取其他环境的数据库引用，可以在调用时传入一个对象参数，在其中通过 env 字段指定要使用的环境。此时方法会返回一个对测试环境数据库的引用。\n\n示例：假设有一个环境名为 test，用做测试环境，那么可以如下获取测试环境数据库：\n\nconst db = wx.cloud.database({\n  env: 'test'\n})\n\n\n要操作一个集合，需先获取它的引用。在获取了数据库的引用后，就可以通过数据库引用上的 collection 方法获取一个集合的引用了，比如获取 userList 集合：\n\nconst userList = db.collection('userList')\n\n\n获取集合的引用并不会发起网络请求去拉取它的数据，我们可以通过此引用在该集合上进行增删查改的操作，除此之外，还可以通过集合上的 doc 方法来获取集合中一个指定 ID 的记录的引用。同理，记录的引用可以用于对特定记录进行更新和删除操作。\n\n假设我们有一个用户的 ID 为 ajksib8wh52vgwiolppwjie，那么我们可以通过 doc 方法获取它的引用：\n\nconst user = userList.doc('ajksib8wh52vgwiolppwjie')\n\n\n\n# 插入数据\n\n在获取了集合的引用后，就可以通过 add 方法在集合中插入一条记录了。比如我们要在 userList 集合中插入一条记录（用于在登录时记录用户信息）：\n\nconst userList = db.collection('userList')\nuserList.add({\n  data: {\n    userName:\"张三\",\n    userID:this.data.userID,\n    // ...\n  },\n  success: function(res) {\n    // res 是一个对象，其中有 _id 字段标记刚创建的记录的 id\n    console.log(res);\n  }\n})\n\n\n\n# 查询数据\n\n在获取了集合的引用后，就可以通过 where 方法传入一个对象，数据库返回集合中字段等于指定值的 JSON 文档。例如，这里我要查询数据库集合 userList 中 userID 等于 this.data.userID 的记录：\n\nconst userList = db.collection('userList')\nuserList.where({\n  userID:this.data.userID\n}).get({\n  success: function(res) {\n    // 输出 [{ \"title\": \"The Catcher in the Rye\", ... }]\n    console.log(res)\n  }\n})\n\n\n或者我们要获取 articleList 集合中所有 type 值为 1 的记录（也就是经验贴）：\n\nconst articleList = db.collection('articleList')\narticleList.where({\n  type:1\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\nwhere 方法接收一个对象参数，该对象中每个字段和它的值构成一个需满足的匹配条件，各个字段间的关系是 \"与\" 的关系，即需同时满足这些匹配条件，在这个例子中，就是查询出 articleList 集合中 authorID 等于 this.data.userID 且 type 等于 1 的记录（也就是文章数据库中所有由此位用户发布的经验贴）。\n\nconst articleList = db.collection('articleList')\narticleList.where({\n  authorID:this.data.userID,\n  type:1\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\n如果要获取一个集合的数据，比如获取 articleList 集合上的所有记录，可以在集合上调用 get 方法获取，但通常不建议这么使用，小程序不允许我们一次获取过量数据，只应获取必要的数据。为了防止误操作以及保护小程序体验，小程序端在获取集合数据时服务器一次默认并且最多返回 20 条记录，云函数端这个数字则是 100。开发者可以通过 limit 方法指定需要获取的记录数量，但小程序端不能超过 20 条，云函数端不能超过 100 条。\n\ndb.collection('articleList').get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res.data)\n  }\n})\n\n\n使用云函数可以分批次获取全部数据：\n\nconst cloud = require('wx-server-sdk')\ncloud.init()\nconst db = cloud.database()\nconst MAX_LIMIT = 100\nexports.main = async (event, context) => {\n  // 先取出集合记录总数\n  const countResult = await db.collection('articleList').count()\n  const total = countResult.total\n  // 计算需分几次取\n  const batchTimes = Math.ceil(total / 100)\n  // 承载所有读操作的 promise 的数组\n  const tasks = []\n  for (let i = 0; i < batchTimes; i++) {\n    const promise = db.collection('articleList').skip(i * MAX_LIMIT).limit(MAX_LIMIT).get()\n    tasks.push(promise)\n  }\n  // 等待所有\n  return (await Promise.all(tasks)).reduce((acc, cur) => {\n    return {\n      data: acc.data.concat(cur.data),\n      errMsg: acc.errMsg,\n    }\n  })\n}\n\n\n\n# 查询指令\n\n假设我们需要查询收藏数超过 30 的文章，那么传入对象表示全等匹配的方式就无法满足了，这时就需要用到查询指令。数据库 API 提供了大于、小于等多种查询指令，这些指令都暴露在 db.command 对象上。比如收藏数（number）超过 30 的文章：\n\nconst articleList = db.collection('articleList')\narticleList.where({\n  // gt 方法用于指定一个 \"大于\" 条件，此处 _.gt(30) 是一个 \"大于 30\" 的条件\n  number: db.command.gt(30)\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\nAPI 提供了以下查询指令：\n\n\n\n除了指定一个字段满足一个条件之外，我们还可以通过指定一个字段需同时满足多个条件，比如用 and 逻辑指令查询点赞数在 30 和 70 之间的文章：\n\nconst articleList = db.collection('articleList')\narticleList.where({\n  // and 方法用于指定一个 \"与\" 条件，此处 _.and(_.gt(30), _.lt(70)) \n  //是一个 \"大于 30 且小于 70\" 的条件\n  number: db.command.and(db.command.gt(30), db.command.lt(70))\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\n如果我们需要跨字段进行 \"或\" 操作，可以做到吗？答案是肯定的，or 指令还可以用来接受多个（可以多于两个）查询条件，表示需满足多个查询条件中的任意一个，比如我们点赞（number）小于或等于 50 或类型（type）为 1 的文章：\n\nconst _ = db.command\ndb.collection('todos').where(_.or([\n  {\n    progress: _.lte(50)\n  },\n  {\n    type: _.eq(1)\n  }\n]))\n.get({\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n\n# 更新数据\n\n更新数据的 API 与查询数据的 API 类似，只是调用的是 update 方法，比如我们需要将集合(userList)中当前用户(this.data.userID)的收藏数（number）加1：\n\nconst db = wx.cloud.database()\nconst userList = db.collection('userList')\nuserList.where({\n  _openid: this.data.userID\n}).update({\n  data: {\n    // inc 方法用于指定一个自增\n    number: db.command.inc(1)\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n微信小程序云开发数据库 API 还提供了其他更新指令，比如：\n\n\n\nupdate 字段只是局部刷新，如果需要将整个文档替换，可以使用 set 指令：\n\nconst db = wx.cloud.database()\nconst userList = db.collection('userList')\nuserList.where({\n  _openid: this.data.userID\n}).update({\n  data: {\n    // set 方法用于指定一个覆盖\n    number: 15\n    // ...\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n\n# 删除数据\n\n删除数据的 API 与查询数据的 API 类似，只是调用的是 remove 方法，比如我们需要将集合(userList)中当前用户(this.data.userID)的记录删除：\n\nconst db = wx.cloud.database()\nconst userList = db.collection('userList')\nuserList.where({\n  userID: this.data.userID\n}).remove({\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n\n# 云存储\n\n云开发提供了一块存储空间，提供了上传文件到云端、带权限管理的云端下载能力，开发者可以在小程序端和云函数端通过 API 使用云存储功能。\n\n在小程序端可以分别调用 wx.cloud.uploadFile 和 wx.cloud.downloadFile 完成上传和下载云文件操作。下面简单的几行代码，即可实现在小程序内让用户选择一张图片，然后上传到云端管理的功能：\n\n// 让用户选择一张图片\nwx.chooseImage({\n  success: chooseResult => {\n    // 将图片上传至云存储空间\n    wx.cloud.uploadFile({\n      // 指定上传到的云路径\n      cloudPath: 'my-photo.png',\n      // 指定要上传的文件的小程序临时文件路径\n      filePath: chooseResult.tempFilePaths[0],\n      // 成功回调\n      success: res => {\n        console.log('上传成功', res)\n      },\n    })\n  },\n})\n",
      "normalizedContent": "# 云开发：数据库和云存储操作\n\n\n# 数据库结构\n\n云开发提供了一个 json 数据库，顾名思义，数据库中的每条记录都是一个 json 格式的对象。一个数据库可以有多个集合（相当于关系型数据中的表），集合可看做一个 json 数组，数组中的每个对象就是一条记录，记录的格式是 json 对象。\n\n关系型数据库和 json 数据库的概念对应关系如下表：\n\n\n\n以下是一个示例的集合数据，假设我们有一个 books 集合存放了图书记录，其中有两本书：\n\n[\n  {\n    \"_id\": \"wzh76lk5_o_dt0vo\",\n    \"title\": \"the catcher in the rye\",\n    \"author\": \"j. d. salinger\",\n    \"characters\": [\n      \"holden caulfield\",\n      \"stradlater\",\n      \"mr. antolini\"\n    ],\n    \"publishinfo\": {\n      \"year\": 1951,\n      \"country\": \"united states\"\n    }\n  },\n  {\n    \"_id\": \"wzia0lk5_o_dt0vr\",\n    \"_openid\": \"ohl4l0rnhq7vmmbt_danqa4epaz0\",\n    \"title\": \"the lady of the camellias\",\n    \"author\": \"alexandre dumas fils\",\n    \"characters\": [\n      \"marguerite gautier\",\n      \"armand duval\",\n      \"prudence\",\n      \"count de varville\"\n    ],\n    \"publishinfo\": {\n      \"year\": 1848,\n      \"country\": \"france\"\n    }\n  }\n]\n\n\n在图书信息中，我们用 title, author 来记录图书标题和作者，用 characters 数组来记录书中的主要人物，用 publishinfo 来记录图书的出版信息。在其中我们可以看到，字段既可以是字符串或数字，还可以是对象或数组，就是一个 json 对象。\n\n每条记录都有一个 _id 字段用以唯一标志一条记录、一个_openid 字段用以标志记录的创建者，即小程序的用户。需要特别注意的是，在管理端（控制台和云函数）中创建的不会有 _openid 字段，因为这是属于管理员创建的记录。开发者可以自定义_id，但不可自定义和修改 _openid 。_openid 是在文档创建时由系统根据小程序用户默认创建的，开发者可使用其来标识和定位文档。\n\n\n# 数据库基本操作\n\n\n# 简述\n\n数据库 api 分为小程序端和服务端两部分，小程序端 api 拥有严格的调用权限控制，开发者可在小程序内直接调用 api 进行非敏感数据的操作。对于有更高安全要求的数据，可在云函数内通过服务端 api 进行操作。云函数的环境是与客户端完全隔离的，在云函数上可以私密且安全的操作数据库。\n\n数据库 api 包含增删改查的能力，使用 api 操作数据库只需三步：获取数据库引用、构造查询/更新条件、发出请求。以下是一个在小程序中查询数据库的发表于美国的图书记录的例子：\n\n// 1. 获取数据库引用\nconst db = wx.cloud.database()\n// 2. 构造查询语句\n// collection 方法获取一个集合的引用\n// where 方法传入一个对象，数据库返回集合中字段等于指定值的 json 文档。\n// api 也支持高级的查询条件（比如大于、小于、in 等），具体见文档查看支持列表\n// get 方法会触发网络请求，往数据库取数据\ndb.collection('books').where({\n  publishinfo: {\n    country: 'united states'    // 限定查询条件为美国出版的图书\n  }\n}).get({\n  success: function(res) {\n  // 输出 [{ \"title\": \"the catcher in the rye\", ... }]\n  console.log(res)\n }\n})\n\n\n在我们实际应用中，可以使用这个查询语句来查询某位用户所有的贴子。\n\n\n# 初始化数据库\n\n在你的js文件中，首先需要引入数据库的sdk：\n\nconst db = wx.cloud.database()\n\n\n如需获取其他环境的数据库引用，可以在调用时传入一个对象参数，在其中通过 env 字段指定要使用的环境。此时方法会返回一个对测试环境数据库的引用。\n\n示例：假设有一个环境名为 test，用做测试环境，那么可以如下获取测试环境数据库：\n\nconst db = wx.cloud.database({\n  env: 'test'\n})\n\n\n要操作一个集合，需先获取它的引用。在获取了数据库的引用后，就可以通过数据库引用上的 collection 方法获取一个集合的引用了，比如获取 userlist 集合：\n\nconst userlist = db.collection('userlist')\n\n\n获取集合的引用并不会发起网络请求去拉取它的数据，我们可以通过此引用在该集合上进行增删查改的操作，除此之外，还可以通过集合上的 doc 方法来获取集合中一个指定 id 的记录的引用。同理，记录的引用可以用于对特定记录进行更新和删除操作。\n\n假设我们有一个用户的 id 为 ajksib8wh52vgwiolppwjie，那么我们可以通过 doc 方法获取它的引用：\n\nconst user = userlist.doc('ajksib8wh52vgwiolppwjie')\n\n\n\n# 插入数据\n\n在获取了集合的引用后，就可以通过 add 方法在集合中插入一条记录了。比如我们要在 userlist 集合中插入一条记录（用于在登录时记录用户信息）：\n\nconst userlist = db.collection('userlist')\nuserlist.add({\n  data: {\n    username:\"张三\",\n    userid:this.data.userid,\n    // ...\n  },\n  success: function(res) {\n    // res 是一个对象，其中有 _id 字段标记刚创建的记录的 id\n    console.log(res);\n  }\n})\n\n\n\n# 查询数据\n\n在获取了集合的引用后，就可以通过 where 方法传入一个对象，数据库返回集合中字段等于指定值的 json 文档。例如，这里我要查询数据库集合 userlist 中 userid 等于 this.data.userid 的记录：\n\nconst userlist = db.collection('userlist')\nuserlist.where({\n  userid:this.data.userid\n}).get({\n  success: function(res) {\n    // 输出 [{ \"title\": \"the catcher in the rye\", ... }]\n    console.log(res)\n  }\n})\n\n\n或者我们要获取 articlelist 集合中所有 type 值为 1 的记录（也就是经验贴）：\n\nconst articlelist = db.collection('articlelist')\narticlelist.where({\n  type:1\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\nwhere 方法接收一个对象参数，该对象中每个字段和它的值构成一个需满足的匹配条件，各个字段间的关系是 \"与\" 的关系，即需同时满足这些匹配条件，在这个例子中，就是查询出 articlelist 集合中 authorid 等于 this.data.userid 且 type 等于 1 的记录（也就是文章数据库中所有由此位用户发布的经验贴）。\n\nconst articlelist = db.collection('articlelist')\narticlelist.where({\n  authorid:this.data.userid,\n  type:1\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\n如果要获取一个集合的数据，比如获取 articlelist 集合上的所有记录，可以在集合上调用 get 方法获取，但通常不建议这么使用，小程序不允许我们一次获取过量数据，只应获取必要的数据。为了防止误操作以及保护小程序体验，小程序端在获取集合数据时服务器一次默认并且最多返回 20 条记录，云函数端这个数字则是 100。开发者可以通过 limit 方法指定需要获取的记录数量，但小程序端不能超过 20 条，云函数端不能超过 100 条。\n\ndb.collection('articlelist').get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res.data)\n  }\n})\n\n\n使用云函数可以分批次获取全部数据：\n\nconst cloud = require('wx-server-sdk')\ncloud.init()\nconst db = cloud.database()\nconst max_limit = 100\nexports.main = async (event, context) => {\n  // 先取出集合记录总数\n  const countresult = await db.collection('articlelist').count()\n  const total = countresult.total\n  // 计算需分几次取\n  const batchtimes = math.ceil(total / 100)\n  // 承载所有读操作的 promise 的数组\n  const tasks = []\n  for (let i = 0; i < batchtimes; i++) {\n    const promise = db.collection('articlelist').skip(i * max_limit).limit(max_limit).get()\n    tasks.push(promise)\n  }\n  // 等待所有\n  return (await promise.all(tasks)).reduce((acc, cur) => {\n    return {\n      data: acc.data.concat(cur.data),\n      errmsg: acc.errmsg,\n    }\n  })\n}\n\n\n\n# 查询指令\n\n假设我们需要查询收藏数超过 30 的文章，那么传入对象表示全等匹配的方式就无法满足了，这时就需要用到查询指令。数据库 api 提供了大于、小于等多种查询指令，这些指令都暴露在 db.command 对象上。比如收藏数（number）超过 30 的文章：\n\nconst articlelist = db.collection('articlelist')\narticlelist.where({\n  // gt 方法用于指定一个 \"大于\" 条件，此处 _.gt(30) 是一个 \"大于 30\" 的条件\n  number: db.command.gt(30)\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\napi 提供了以下查询指令：\n\n\n\n除了指定一个字段满足一个条件之外，我们还可以通过指定一个字段需同时满足多个条件，比如用 and 逻辑指令查询点赞数在 30 和 70 之间的文章：\n\nconst articlelist = db.collection('articlelist')\narticlelist.where({\n  // and 方法用于指定一个 \"与\" 条件，此处 _.and(_.gt(30), _.lt(70)) \n  //是一个 \"大于 30 且小于 70\" 的条件\n  number: db.command.and(db.command.gt(30), db.command.lt(70))\n}).get({\n  success: function(res) {\n    // res.data 是一个包含集合中有权限访问的所有记录的数据，不超过 20 条\n    console.log(res)\n  }\n})\n\n\n如果我们需要跨字段进行 \"或\" 操作，可以做到吗？答案是肯定的，or 指令还可以用来接受多个（可以多于两个）查询条件，表示需满足多个查询条件中的任意一个，比如我们点赞（number）小于或等于 50 或类型（type）为 1 的文章：\n\nconst _ = db.command\ndb.collection('todos').where(_.or([\n  {\n    progress: _.lte(50)\n  },\n  {\n    type: _.eq(1)\n  }\n]))\n.get({\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n\n# 更新数据\n\n更新数据的 api 与查询数据的 api 类似，只是调用的是 update 方法，比如我们需要将集合(userlist)中当前用户(this.data.userid)的收藏数（number）加1：\n\nconst db = wx.cloud.database()\nconst userlist = db.collection('userlist')\nuserlist.where({\n  _openid: this.data.userid\n}).update({\n  data: {\n    // inc 方法用于指定一个自增\n    number: db.command.inc(1)\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n微信小程序云开发数据库 api 还提供了其他更新指令，比如：\n\n\n\nupdate 字段只是局部刷新，如果需要将整个文档替换，可以使用 set 指令：\n\nconst db = wx.cloud.database()\nconst userlist = db.collection('userlist')\nuserlist.where({\n  _openid: this.data.userid\n}).update({\n  data: {\n    // set 方法用于指定一个覆盖\n    number: 15\n    // ...\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n\n# 删除数据\n\n删除数据的 api 与查询数据的 api 类似，只是调用的是 remove 方法，比如我们需要将集合(userlist)中当前用户(this.data.userid)的记录删除：\n\nconst db = wx.cloud.database()\nconst userlist = db.collection('userlist')\nuserlist.where({\n  userid: this.data.userid\n}).remove({\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n\n\n\n# 云存储\n\n云开发提供了一块存储空间，提供了上传文件到云端、带权限管理的云端下载能力，开发者可以在小程序端和云函数端通过 api 使用云存储功能。\n\n在小程序端可以分别调用 wx.cloud.uploadfile 和 wx.cloud.downloadfile 完成上传和下载云文件操作。下面简单的几行代码，即可实现在小程序内让用户选择一张图片，然后上传到云端管理的功能：\n\n// 让用户选择一张图片\nwx.chooseimage({\n  success: chooseresult => {\n    // 将图片上传至云存储空间\n    wx.cloud.uploadfile({\n      // 指定上传到的云路径\n      cloudpath: 'my-photo.png',\n      // 指定要上传的文件的小程序临时文件路径\n      filepath: chooseresult.tempfilepaths[0],\n      // 成功回调\n      success: res => {\n        console.log('上传成功', res)\n      },\n    })\n  },\n})\n",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "代码规范",
      "frontmatter": {},
      "regularPath": "/guide/",
      "relativePath": "guide/index.md",
      "key": "v-11d2e8c4",
      "path": "/guide/",
      "headers": [
        {
          "level": 2,
          "title": "文档编写",
          "slug": "文档编写",
          "normalizedTitle": "文档编写",
          "charIndex": 11
        },
        {
          "level": 2,
          "title": "尺寸规范",
          "slug": "尺寸规范",
          "normalizedTitle": "尺寸规范",
          "charIndex": 185
        },
        {
          "level": 2,
          "title": "定位",
          "slug": "定位",
          "normalizedTitle": "定位",
          "charIndex": 270
        },
        {
          "level": 2,
          "title": "源代码托管",
          "slug": "源代码托管",
          "normalizedTitle": "源代码托管",
          "charIndex": 372
        },
        {
          "level": 2,
          "title": "注释",
          "slug": "注释",
          "normalizedTitle": "注释",
          "charIndex": 422
        }
      ],
      "headersStr": "文档编写 尺寸规范 定位 源代码托管 注释",
      "content": "# 代码规范\n\n\n# 文档编写\n\n编写代码时，需要随时记录问题，在 [本项目共享文档] 文件夹中 姓名缩写.md ,用于记录下面的内容：\n\n1.查阅网络解决的问题，记录问题内容和解决方法\n2.页面的接口。所有列表渲染的数据都需要先使用 js 中的 data 进行模拟，将接口记录在文档中。\n\n文档使用 Markdown 语法编写，语法详见markdown 教程\n\n\n# 尺寸规范\n\n使用 rpx 作为 css 尺寸单位。页面必须在 iPhone X、iPhone 12 Pro、iPhone6 上均测试通过。\n可参考 codefun 生成的定位代码。\ncodefun 教程\n\n\n# 定位\n\n严格使用 css 规范进行定位，除开必须使用的形状、样式等静态物体，其余(例如卡片、按钮）禁止使用 fixed 或者 abosulute 布局。\n\n\n# 源代码托管\n\n在某一工作告一段落后，必须提交到远程 git 分支。\n微信 git 使用教程\n\n\n# 注释\n\n代码中复杂的地方需要有良好的注释。",
      "normalizedContent": "# 代码规范\n\n\n# 文档编写\n\n编写代码时，需要随时记录问题，在 [本项目共享文档] 文件夹中 姓名缩写.md ,用于记录下面的内容：\n\n1.查阅网络解决的问题，记录问题内容和解决方法\n2.页面的接口。所有列表渲染的数据都需要先使用 js 中的 data 进行模拟，将接口记录在文档中。\n\n文档使用 markdown 语法编写，语法详见markdown 教程\n\n\n# 尺寸规范\n\n使用 rpx 作为 css 尺寸单位。页面必须在 iphone x、iphone 12 pro、iphone6 上均测试通过。\n可参考 codefun 生成的定位代码。\ncodefun 教程\n\n\n# 定位\n\n严格使用 css 规范进行定位，除开必须使用的形状、样式等静态物体，其余(例如卡片、按钮）禁止使用 fixed 或者 abosulute 布局。\n\n\n# 源代码托管\n\n在某一工作告一段落后，必须提交到远程 git 分支。\n微信 git 使用教程\n\n\n# 注释\n\n代码中复杂的地方需要有良好的注释。",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "代码规范",
      "frontmatter": {
        "title": "代码规范",
        "date": "2022-10-10T00:00:00.000Z"
      },
      "regularPath": "/guide/guifan.html",
      "relativePath": "guide/guifan.md",
      "key": "v-4fedf641",
      "path": "/guide/guifan.html",
      "headers": [
        {
          "level": 2,
          "title": "文档编写",
          "slug": "文档编写",
          "normalizedTitle": "文档编写",
          "charIndex": 11
        },
        {
          "level": 2,
          "title": "尺寸规范",
          "slug": "尺寸规范",
          "normalizedTitle": "尺寸规范",
          "charIndex": 185
        },
        {
          "level": 2,
          "title": "定位",
          "slug": "定位",
          "normalizedTitle": "定位",
          "charIndex": 270
        },
        {
          "level": 2,
          "title": "源代码托管",
          "slug": "源代码托管",
          "normalizedTitle": "源代码托管",
          "charIndex": 372
        },
        {
          "level": 2,
          "title": "注释",
          "slug": "注释",
          "normalizedTitle": "注释",
          "charIndex": 422
        }
      ],
      "headersStr": "文档编写 尺寸规范 定位 源代码托管 注释",
      "content": "# 代码规范\n\n\n# 文档编写\n\n编写代码时，需要随时记录问题，在 [本项目共享文档] 文件夹中 姓名缩写.md ,用于记录下面的内容：\n\n1.查阅网络解决的问题，记录问题内容和解决方法\n2.页面的接口。所有列表渲染的数据都需要先使用 js 中的 data 进行模拟，将接口记录在文档中。\n\n文档使用 Markdown 语法编写，语法详见markdown 教程\n\n\n# 尺寸规范\n\n使用 rpx 作为 css 尺寸单位。页面必须在 iPhone X、iPhone 12 Pro、iPhone6 上均测试通过。\n可参考 codefun 生成的定位代码。\ncodefun 教程\n\n\n# 定位\n\n严格使用 css 规范进行定位，除开必须使用的形状、样式等静态物体，其余(例如卡片、按钮）禁止使用 fixed 或者 abosulute 布局。\n\n\n# 源代码托管\n\n在某一工作告一段落后，必须提交到远程 git 分支。\n微信 git 使用教程\n\n\n# 注释\n\n代码中复杂的地方需要有良好的注释。",
      "normalizedContent": "# 代码规范\n\n\n# 文档编写\n\n编写代码时，需要随时记录问题，在 [本项目共享文档] 文件夹中 姓名缩写.md ,用于记录下面的内容：\n\n1.查阅网络解决的问题，记录问题内容和解决方法\n2.页面的接口。所有列表渲染的数据都需要先使用 js 中的 data 进行模拟，将接口记录在文档中。\n\n文档使用 markdown 语法编写，语法详见markdown 教程\n\n\n# 尺寸规范\n\n使用 rpx 作为 css 尺寸单位。页面必须在 iphone x、iphone 12 pro、iphone6 上均测试通过。\n可参考 codefun 生成的定位代码。\ncodefun 教程\n\n\n# 定位\n\n严格使用 css 规范进行定位，除开必须使用的形状、样式等静态物体，其余(例如卡片、按钮）禁止使用 fixed 或者 abosulute 布局。\n\n\n# 源代码托管\n\n在某一工作告一段落后，必须提交到远程 git 分支。\n微信 git 使用教程\n\n\n# 注释\n\n代码中复杂的地方需要有良好的注释。",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "触底分页加载的实现",
      "frontmatter": {
        "title": "触底分页加载的实现",
        "date": "2022-10-06T00:00:00.000Z"
      },
      "regularPath": "/guide/reachBottom.html",
      "relativePath": "guide/reachBottom.md",
      "key": "v-7649dccb",
      "path": "/guide/reachBottom.html",
      "headersStr": null,
      "content": "# 触底分页加载的实现\n\n实现触底加载，首先要在 js 文件的 data 中添加容器用于接收数据：\n\nPage({\n  data: {\n    //...\n    itemList: [],\n  },\n//...\n\n\n接着，创建一个函数用于调用数据库，将数据添加到 itemList 中：\n\nloadMethod: async function (aType) {\n    let old_data = this.data.itemList;\n    // console.log(old_data.length+\"  \"+count);\n    if (isAll) {\n        return \"到底了\";\n    } else {\n        return new Promise((resolve, reject) => {\n        articleList\n            .where({\n            type: aType,\n            })\n            .skip(this.data.itemList.length)\n            .get()\n            .then((res) => {\n            console.log(res.data);\n            console.log(old_data.concat(res.data).length);\n            if (old_data.concat(res.data).length===allLength){\n                isAll=true;\n            }\n            allLength=old_data.concat(res.data).length;\n            this.setData({\n                itemList:old_data.concat(res.data)\n            })\n            // resolve(old_data.concat(res.data.data));\n            });\n        });\n    }\n},\n\n\n在经验和问答页面已经写好，可以复制上面的代码。\n\n在页面顶部声明数据库，以及加载完成判定变量，缺一不可：\n\nlet count;\nlet db;\nlet articleList;\nlet allLength;\nlet isAll=false;\n\n\n然后在 onLoad 函数中调用一次：\n\nonLoad: async function (options) {\n    wx.cloud.init();\n    db = wx.cloud.database();\n    articleList = db.collection(\"articleList\");\n    count = await db.collection(\"articleList\").count();\n    this.loadMethod(1);\n},\n\n\n在触底 API 中再次调用：\n\nonReachBottom: async function () {\n    db = wx.cloud.database();\n    articleList = db.collection(\"articleList\");\n    count = await db.collection(\"articleList\").count();\n    await this.loadMethod(1);\n},\n\n\nloadMethod 接收一个参数，用于判断是加载经验还是问答。1 为经验，2 为问答。",
      "normalizedContent": "# 触底分页加载的实现\n\n实现触底加载，首先要在 js 文件的 data 中添加容器用于接收数据：\n\npage({\n  data: {\n    //...\n    itemlist: [],\n  },\n//...\n\n\n接着，创建一个函数用于调用数据库，将数据添加到 itemlist 中：\n\nloadmethod: async function (atype) {\n    let old_data = this.data.itemlist;\n    // console.log(old_data.length+\"  \"+count);\n    if (isall) {\n        return \"到底了\";\n    } else {\n        return new promise((resolve, reject) => {\n        articlelist\n            .where({\n            type: atype,\n            })\n            .skip(this.data.itemlist.length)\n            .get()\n            .then((res) => {\n            console.log(res.data);\n            console.log(old_data.concat(res.data).length);\n            if (old_data.concat(res.data).length===alllength){\n                isall=true;\n            }\n            alllength=old_data.concat(res.data).length;\n            this.setdata({\n                itemlist:old_data.concat(res.data)\n            })\n            // resolve(old_data.concat(res.data.data));\n            });\n        });\n    }\n},\n\n\n在经验和问答页面已经写好，可以复制上面的代码。\n\n在页面顶部声明数据库，以及加载完成判定变量，缺一不可：\n\nlet count;\nlet db;\nlet articlelist;\nlet alllength;\nlet isall=false;\n\n\n然后在 onload 函数中调用一次：\n\nonload: async function (options) {\n    wx.cloud.init();\n    db = wx.cloud.database();\n    articlelist = db.collection(\"articlelist\");\n    count = await db.collection(\"articlelist\").count();\n    this.loadmethod(1);\n},\n\n\n在触底 api 中再次调用：\n\nonreachbottom: async function () {\n    db = wx.cloud.database();\n    articlelist = db.collection(\"articlelist\");\n    count = await db.collection(\"articlelist\").count();\n    await this.loadmethod(1);\n},\n\n\nloadmethod 接收一个参数，用于判断是加载经验还是问答。1 为经验，2 为问答。",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "工具包的使用",
      "frontmatter": {
        "title": "工具包的使用",
        "date": "2022-10-06T00:00:00.000Z"
      },
      "regularPath": "/guide/utils.html",
      "relativePath": "guide/utils.md",
      "key": "v-385ffceb",
      "path": "/guide/utils.html",
      "headers": [
        {
          "level": 2,
          "title": "addUser 添加用户",
          "slug": "adduser-添加用户",
          "normalizedTitle": "adduser 添加用户",
          "charIndex": 65
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用",
          "normalizedTitle": "调用",
          "charIndex": 57
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值",
          "normalizedTitle": "返回值",
          "charIndex": 673
        },
        {
          "level": 2,
          "title": "getUserID 获取用户openid",
          "slug": "getuserid-获取用户openid",
          "normalizedTitle": "getuserid 获取用户openid",
          "charIndex": 881
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-2",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-2",
          "normalizedTitle": "调用",
          "charIndex": 57
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-2",
          "normalizedTitle": "返回值",
          "charIndex": 673
        },
        {
          "level": 2,
          "title": "addArticle 添加文章",
          "slug": "addarticle-添加文章",
          "normalizedTitle": "addarticle 添加文章",
          "charIndex": 1457
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-3",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-3",
          "normalizedTitle": "调用",
          "charIndex": 57
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-3",
          "normalizedTitle": "返回值",
          "charIndex": 673
        },
        {
          "level": 2,
          "title": "getArticle 获取文章",
          "slug": "getarticle-获取文章",
          "normalizedTitle": "getarticle 获取文章",
          "charIndex": 2181
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-4",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-4",
          "normalizedTitle": "调用",
          "charIndex": 57
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-4",
          "normalizedTitle": "返回值",
          "charIndex": 673
        },
        {
          "level": 2,
          "title": "AddLike 添加点赞或插眼",
          "slug": "addlike-添加点赞或插眼",
          "normalizedTitle": "addlike 添加点赞或插眼",
          "charIndex": 2588
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-5",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-5",
          "normalizedTitle": "调用",
          "charIndex": 57
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-5",
          "normalizedTitle": "返回值",
          "charIndex": 673
        },
        {
          "level": 2,
          "title": "addComment 添加评论",
          "slug": "addcomment-添加评论",
          "normalizedTitle": "addcomment 添加评论",
          "charIndex": 3137
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-6",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-6",
          "normalizedTitle": "调用",
          "charIndex": 57
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-6",
          "normalizedTitle": "返回值",
          "charIndex": 673
        },
        {
          "level": 2,
          "title": "addCollect 添加收藏",
          "slug": "addcollect-添加收藏",
          "normalizedTitle": "addcollect 添加收藏",
          "charIndex": 3696
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-7",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-7",
          "normalizedTitle": "调用",
          "charIndex": 57
        },
        {
          "level": 3,
          "title": "返回值",
          "slug": "返回值-7",
          "normalizedTitle": "返回值",
          "charIndex": 673
        },
        {
          "level": 2,
          "title": "getAim 获取目标",
          "slug": "getaim-获取目标",
          "normalizedTitle": "getaim 获取目标",
          "charIndex": 4223
        },
        {
          "level": 3,
          "title": "声明",
          "slug": "声明-8",
          "normalizedTitle": "声明",
          "charIndex": 82
        },
        {
          "level": 3,
          "title": "调用",
          "slug": "调用-8",
          "normalizedTitle": "调用",
          "charIndex": 57
        }
      ],
      "headersStr": "addUser 添加用户 声明 调用 返回值 getUserID 获取用户openid 声明 调用 返回值 addArticle 添加文章 声明 调用 返回值 getArticle 获取文章 声明 调用 返回值 AddLike 添加点赞或插眼 声明 调用 返回值 addComment 添加评论 声明 调用 返回值 addCollect 添加收藏 声明 调用 返回值 getAim 获取目标 声明 调用",
      "content": "# 工具包的使用\n\n我把主要的工具函数（包括数据库的各类读写）都封装起来放在了 utils 文件夹中，这样可以方便调用。\n\n\n# addUser 添加用户\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addUser = require(\"../../utils/addUser.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 参数列表，必须按顺序传入\n * @param {string} name 用户名\n * @param {string} avatar 用户的头像链接\n * @param {string} id 用户的ID\n */\n\n\n调用示例：\n\nlet res=await addUser.addUser.addMethod(this.data.\nuserName,this.data.userAvatar,this.data.userID)\n\n\n注意，必须使用 await 关键字，否则会报错。并且调用这个方法的函数必须是异步函数。例如：\n\nPage({\n  data: {\n    //...\n  },\n  onLoad:async function (options) {\n    let res=await addUser.addUser.addMethod(this.data.\nuserName,this.data.userAvatar,this.data.userID)\n  },\n  //...\n})\n\n\n它所在的函数声明中必须有 async 关键字。\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。也就是说：\n\nlet res=await addUser.addUser.addMethod(this.data.\nuserName,this.data.userAvatar,this.data.userID);\nconsole.log(res)\n\n\n打印出的结果是 添加成功 或者 添加失败。\n\n你可以根据这个返回值来向用户作出声明。\n\n\n# getUserID 获取用户openid\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getUserID = require(\"../../utils/getUserID.js\");\n\n\n\n# 调用\n\n无传入参数，直接调用，但是只能在按钮点击事件中调用。\n\nawait getUserID.getui.getUserID();\n\n\n同上，必须在异步函数中调用。\n\nasync login() {\n    // 用户登录\n    let resl = await getUserID.getui.getUserID();\n    this.setData({\n      userID: resl[2],\n      userAvatar: resl[1],\n      userName: resl[0],\n    });\n    console.log(\"!!\" + this.data.userID + this.data.userAvatar);\n},\n\n\n\n# 返回值\n\n返回值是一个数组，包含三个元素，分别是：\n\nresl[0] // 用户名\nresl[1] // 用户头像链接\nresl[2] // 用户openid\n\n\n在调用完这个函数后，你可以把这三个值赋值给 App.js 的data中的变量，供全局使用。\n\n\n# addArticle 添加文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addArticle = require(\"../../utils/addArticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 用于向集合 articleList 添加一条文章信息\n * 参数列表，必须按顺序传入\n * @param {string} title 文章标题\n * @param {string} tag 文章标签\n * @param {string} content 文章内容\n * @param {string} type 文章类型\n * @param {List} images 图片列表\n * @param {string} author 文章作者\n * @param {string} authorID 文章作者ID\n * @param {string} authorAvatar 文章作者头像\n */\n\n\n必须按照上面的顺序传入参数。\n\n以异步的形式调用，示例：\n\nlet res = await addArticle.addArticle.addMethod(\n  this.data.title,\n  this.data.tag,\n  this.data.content,\n  this.data.type,\n  this.data.images,\n  this.data.userName,\n  this.data.userID,\n  this.data.userAvatar\n);\n\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。\n\n\n# getArticle 获取文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getArticle = require(\"../../utils/getArticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 查询一篇文章\n * @param {string} id 文章id\n */\n\n\n传入的参数是文章的id。用于在我的时跳转到文章详情页。\n\n以异步的形式调用，示例：\n\nlet res = await getArticle.getArticle.\ngetArticleMethod(this.data.id);\n\n\n\n# 返回值\n\n返回值是一个对象，包含文章的所有信息。\n\nres.data[0].articleTitle // 文章标题\nres.data[0].articleTag // 文章标签\n//... 具体请查看云开发数据库\n\n\n\n# AddLike 添加点赞或插眼\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addLike = require(\"../../utils/addLike.js\");\n\n\n\n# 调用\n\n接收两个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id。\n\n/**\n * 为文章增加一个点赞或插眼\n * @param {string} articleId 文章id\n * @param {string} userId 发生点赞行为的用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addLike.addLike.addMethod(this.data.id, this.data.userID);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经点赞或插眼，如果已经点赞或插眼，会在数据库删除点赞和插眼的记录，返回 取消点赞成功 或 取消点赞失败。如果尚未点赞或插眼，会在数据库添加点赞和插眼的记录，返回 点赞成功 或 点赞失败。\n\n返回值是 点赞成功 和 点赞失败 和 取消点赞成功 和 取消点赞失败 四种 string 类型。\n\n在判断显示点赞和插眼的图标时，可以通过文章中的 likeList.length 来得到应该显示的数量。\n\n\n# addComment 添加评论\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addComment = require(\"../../utils/addComment.js\");\n\n\n\n# 调用\n\n接收三个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id，第三个参数是评论内容，第四个是评论者的用户名。\n\n/**\n * 为文章增加一个评论\n * @param {string} articleId 文章id\n * @param {string} userId 发生点赞行为的用户id\n * @param {string} comment 评论内容\n * @param {string} commentUserName 评论者用户名\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addComment.addComment.addMethod(this.\ndata.id, this.data.userID, this.data.comment, this.\ndata.commentUserName);\n\n\n\n# 返回值\n\n本工具会在数据库添加评论的记录，返回 评论成功 或 评论失败。\n\n返回值是 评论成功 和 评论失败 两种 string 类型。\n\n\n# addCollect 添加收藏\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addCollect = require(\"../../utils/addCollect.js\");\n\n\n\n# 调用\n\n接收四个参数。\n\n/**\n * 添加一个收藏\n * @param {string} articleID 收藏的文章id\n * @param {string} userID 收藏者id\n * @param {string} title 收藏的文章标题\n * @param {number} type 收藏的文章类型\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addCollect.addCollect.addCollectMethod\n(this.data.id, this.data.userID, this.data.title,\n this.data.type);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经收藏，如果已经收藏，，返回 已收藏 或。如果尚未收藏，会在数据库添加收藏的记录，返回 收藏成功 或 收藏失败。\n\n返回值是 收藏成功 和 收藏失败 和 已收藏 三种 string 类型。\n\n\n# getAim 获取目标\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getAim = require(\"../../utils/getAim.js\");\n\n\n\n# 调用\n\n接收一个参数，用户的id。\n\n/**\n * 获取目标\n * @param {string} userID 用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await getAim.getAim.getAimMethod\n(this.data.userID);\n",
      "normalizedContent": "# 工具包的使用\n\n我把主要的工具函数（包括数据库的各类读写）都封装起来放在了 utils 文件夹中，这样可以方便调用。\n\n\n# adduser 添加用户\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet adduser = require(\"../../utils/adduser.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 参数列表，必须按顺序传入\n * @param {string} name 用户名\n * @param {string} avatar 用户的头像链接\n * @param {string} id 用户的id\n */\n\n\n调用示例：\n\nlet res=await adduser.adduser.addmethod(this.data.\nusername,this.data.useravatar,this.data.userid)\n\n\n注意，必须使用 await 关键字，否则会报错。并且调用这个方法的函数必须是异步函数。例如：\n\npage({\n  data: {\n    //...\n  },\n  onload:async function (options) {\n    let res=await adduser.adduser.addmethod(this.data.\nusername,this.data.useravatar,this.data.userid)\n  },\n  //...\n})\n\n\n它所在的函数声明中必须有 async 关键字。\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。也就是说：\n\nlet res=await adduser.adduser.addmethod(this.data.\nusername,this.data.useravatar,this.data.userid);\nconsole.log(res)\n\n\n打印出的结果是 添加成功 或者 添加失败。\n\n你可以根据这个返回值来向用户作出声明。\n\n\n# getuserid 获取用户openid\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getuserid = require(\"../../utils/getuserid.js\");\n\n\n\n# 调用\n\n无传入参数，直接调用，但是只能在按钮点击事件中调用。\n\nawait getuserid.getui.getuserid();\n\n\n同上，必须在异步函数中调用。\n\nasync login() {\n    // 用户登录\n    let resl = await getuserid.getui.getuserid();\n    this.setdata({\n      userid: resl[2],\n      useravatar: resl[1],\n      username: resl[0],\n    });\n    console.log(\"!!\" + this.data.userid + this.data.useravatar);\n},\n\n\n\n# 返回值\n\n返回值是一个数组，包含三个元素，分别是：\n\nresl[0] // 用户名\nresl[1] // 用户头像链接\nresl[2] // 用户openid\n\n\n在调用完这个函数后，你可以把这三个值赋值给 app.js 的data中的变量，供全局使用。\n\n\n# addarticle 添加文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addarticle = require(\"../../utils/addarticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 用于向集合 articlelist 添加一条文章信息\n * 参数列表，必须按顺序传入\n * @param {string} title 文章标题\n * @param {string} tag 文章标签\n * @param {string} content 文章内容\n * @param {string} type 文章类型\n * @param {list} images 图片列表\n * @param {string} author 文章作者\n * @param {string} authorid 文章作者id\n * @param {string} authoravatar 文章作者头像\n */\n\n\n必须按照上面的顺序传入参数。\n\n以异步的形式调用，示例：\n\nlet res = await addarticle.addarticle.addmethod(\n  this.data.title,\n  this.data.tag,\n  this.data.content,\n  this.data.type,\n  this.data.images,\n  this.data.username,\n  this.data.userid,\n  this.data.useravatar\n);\n\n\n\n# 返回值\n\n返回值是 添加成功 和 添加失败 两种 string 类型。\n\n\n# getarticle 获取文章\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getarticle = require(\"../../utils/getarticle.js\");\n\n\n\n# 调用\n\n以异步函数的形式调用。传入的参数如下：\n\n/**\n * 查询一篇文章\n * @param {string} id 文章id\n */\n\n\n传入的参数是文章的id。用于在我的时跳转到文章详情页。\n\n以异步的形式调用，示例：\n\nlet res = await getarticle.getarticle.\ngetarticlemethod(this.data.id);\n\n\n\n# 返回值\n\n返回值是一个对象，包含文章的所有信息。\n\nres.data[0].articletitle // 文章标题\nres.data[0].articletag // 文章标签\n//... 具体请查看云开发数据库\n\n\n\n# addlike 添加点赞或插眼\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addlike = require(\"../../utils/addlike.js\");\n\n\n\n# 调用\n\n接收两个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id。\n\n/**\n * 为文章增加一个点赞或插眼\n * @param {string} articleid 文章id\n * @param {string} userid 发生点赞行为的用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addlike.addlike.addmethod(this.data.id, this.data.userid);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经点赞或插眼，如果已经点赞或插眼，会在数据库删除点赞和插眼的记录，返回 取消点赞成功 或 取消点赞失败。如果尚未点赞或插眼，会在数据库添加点赞和插眼的记录，返回 点赞成功 或 点赞失败。\n\n返回值是 点赞成功 和 点赞失败 和 取消点赞成功 和 取消点赞失败 四种 string 类型。\n\n在判断显示点赞和插眼的图标时，可以通过文章中的 likelist.length 来得到应该显示的数量。\n\n\n# addcomment 添加评论\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addcomment = require(\"../../utils/addcomment.js\");\n\n\n\n# 调用\n\n接收三个参数，第一个参数是文章id，第二个参数是发生这个行为的用户的id，第三个参数是评论内容，第四个是评论者的用户名。\n\n/**\n * 为文章增加一个评论\n * @param {string} articleid 文章id\n * @param {string} userid 发生点赞行为的用户id\n * @param {string} comment 评论内容\n * @param {string} commentusername 评论者用户名\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addcomment.addcomment.addmethod(this.\ndata.id, this.data.userid, this.data.comment, this.\ndata.commentusername);\n\n\n\n# 返回值\n\n本工具会在数据库添加评论的记录，返回 评论成功 或 评论失败。\n\n返回值是 评论成功 和 评论失败 两种 string 类型。\n\n\n# addcollect 添加收藏\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet addcollect = require(\"../../utils/addcollect.js\");\n\n\n\n# 调用\n\n接收四个参数。\n\n/**\n * 添加一个收藏\n * @param {string} articleid 收藏的文章id\n * @param {string} userid 收藏者id\n * @param {string} title 收藏的文章标题\n * @param {number} type 收藏的文章类型\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await addcollect.addcollect.addcollectmethod\n(this.data.id, this.data.userid, this.data.title,\n this.data.type);\n\n\n\n# 返回值\n\n本工具会自行判断是否已经收藏，如果已经收藏，，返回 已收藏 或。如果尚未收藏，会在数据库添加收藏的记录，返回 收藏成功 或 收藏失败。\n\n返回值是 收藏成功 和 收藏失败 和 已收藏 三种 string 类型。\n\n\n# getaim 获取目标\n\n\n# 声明\n\n在js页面的顶部声明使用这个工具。\n\nlet getaim = require(\"../../utils/getaim.js\");\n\n\n\n# 调用\n\n接收一个参数，用户的id。\n\n/**\n * 获取目标\n * @param {string} userid 用户id\n */\n\n\n以异步的形式调用，示例：\n\nlet res = await getaim.getaim.getaimmethod\n(this.data.userid);\n",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "actionText": "进入文档",
        "actionLink": "/guide/",
        "subActionText": "GitHub仓库",
        "subActionLink": "https://github.com/JobsessionDao/Jobsession"
      },
      "regularPath": "/",
      "relativePath": "index.md",
      "key": "v-0d6b7171",
      "path": "/",
      "headersStr": null,
      "content": "职念 生涯社区技术文档\n\nBuild with vuepress\nJobsession © 2022 @czh",
      "normalizedContent": "职念 生涯社区技术文档\n\nbuild with vuepress\njobsession © 2022 @czh",
      "charsets": {
        "cjk": true
      }
    },
    {
      "title": "实现页面的复用",
      "frontmatter": {
        "title": "实现页面的复用",
        "date": "2022-10-06T00:00:00.000Z"
      },
      "regularPath": "/guide/yemianfuyong.html",
      "relativePath": "guide/yemianfuyong.md",
      "key": "v-d0dd5dea",
      "path": "/guide/yemianfuyong.html",
      "headers": [
        {
          "level": 2,
          "title": "wx:for 列表携带数据",
          "slug": "wx-for-列表携带数据",
          "normalizedTitle": "wx:for 列表携带数据",
          "charIndex": 45
        },
        {
          "level": 2,
          "title": "页面跳转携带数据",
          "slug": "页面跳转携带数据",
          "normalizedTitle": "页面跳转携带数据",
          "charIndex": 309
        }
      ],
      "headersStr": "wx:for 列表携带数据 页面跳转携带数据",
      "content": "# 实现页面复用\n\n在经验贴展示页面需要跳转到详情页面，就需要对详情页进行复用。\n\n\n# wx:for 列表携带数据\n\n理论 在 wxml 中使用 data-xx 属性可以携带数据在 js 中可以通过 e.currentTarget.dataset.xx 获取到这个数据。\n\n即：\n\n<view wx:for=\"{{item._id}}\" wx:for-item=\"experience\"  wx:key=\"xxx\" data-item=\"{{item}}\">\n  <!-- ... -->\n</view>\n\n\n在 js 中可以通过 e.currentTarget.dataset.item 获取到这个数据。\n\n\n# 页面跳转携带数据\n\n在计算机网络中，使用 GET 方法传递数据是不安全的，因为数据会暴露在 URL 中。但是我们也可以通过这个来传递数据。\n\n理论 在跳转页面时，可以在 URL 中携带数据。\n\n即：\n\nwx.navigateTo({\n  url: '/pages/experienceDetail/experienceDetail?item=' + JSON.stringify(item)\n})\n\n\nPage({\n  data: {\n    // ...\n  },\n  onLoad: function (options) {\n    // ...\n  },\n  onShow: function () {\n    // ...\n  },\n  // ...\n  toDetail: function (e) {\n    let item = e.currentTarget.dataset.item\n    wx.navigateTo({\n      url: '/pages/detail/detail?item=' + JSON.stringify(item),\n    })\n  }\n})\n",
      "normalizedContent": "# 实现页面复用\n\n在经验贴展示页面需要跳转到详情页面，就需要对详情页进行复用。\n\n\n# wx:for 列表携带数据\n\n理论 在 wxml 中使用 data-xx 属性可以携带数据在 js 中可以通过 e.currenttarget.dataset.xx 获取到这个数据。\n\n即：\n\n<view wx:for=\"{{item._id}}\" wx:for-item=\"experience\"  wx:key=\"xxx\" data-item=\"{{item}}\">\n  <!-- ... -->\n</view>\n\n\n在 js 中可以通过 e.currenttarget.dataset.item 获取到这个数据。\n\n\n# 页面跳转携带数据\n\n在计算机网络中，使用 get 方法传递数据是不安全的，因为数据会暴露在 url 中。但是我们也可以通过这个来传递数据。\n\n理论 在跳转页面时，可以在 url 中携带数据。\n\n即：\n\nwx.navigateto({\n  url: '/pages/experiencedetail/experiencedetail?item=' + json.stringify(item)\n})\n\n\npage({\n  data: {\n    // ...\n  },\n  onload: function (options) {\n    // ...\n  },\n  onshow: function () {\n    // ...\n  },\n  // ...\n  todetail: function (e) {\n    let item = e.currenttarget.dataset.item\n    wx.navigateto({\n      url: '/pages/detail/detail?item=' + json.stringify(item),\n    })\n  }\n})\n",
      "charsets": {
        "cjk": true
      }
    }
  ],
  "themeConfig": {
    "enableDarkMode": true,
    "repo": "https://github.com/JobsessionDao/Jobsession",
    "logo": "/logo.png",
    "nav": [
      {
        "text": "Guide",
        "link": "/guide/"
      },
      {
        "text": "API",
        "link": "/api/"
      }
    ],
    "sidebar": {
      "/guide/": [
        {
          "title": "Guide",
          "collapsable": false,
          "children": [
            "/guide/guifan",
            "/guide/czh",
            "/guide/database",
            "/guide/databaseMethods",
            "/guide/git",
            "/guide/reachBottom",
            "/guide/yemianfuyong"
          ]
        }
      ],
      "/api/": [
        {
          "title": "Config",
          "path": "/api/",
          "collapsable": false,
          "children": [
            "/api/utils",
            "/api/yuncunchu"
          ]
        }
      ]
    },
    "codeSwitcher": {
      "groups": {
        "default": {
          "ts": "TypeScript",
          "js": "JavaScript"
        },
        "plugin-usage": {
          "tuple": "Tuple",
          "object": "Object"
        }
      }
    }
  }
}