{"remainingRequest":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\vuepress-theme-vt\\plugins\\fulltext-search\\components\\SearchBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\vuepress-theme-vt\\plugins\\fulltext-search\\components\\SearchBox.vue","mtime":499162500000},{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}