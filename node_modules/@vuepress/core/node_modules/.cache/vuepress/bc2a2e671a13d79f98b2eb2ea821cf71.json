{"remainingRequest":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\vuepress-theme-vt\\lib\\util\\index.js","dependencies":[{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\vuepress-theme-vt\\lib\\util\\index.js","mtime":499162500000},{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\desk\\bjcac\\jobsessionDocument\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}